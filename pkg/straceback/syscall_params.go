// Code generated by get_syscall_params.sh syscall_params.go; DO NOT EDIT

package straceback

func gatherSyscallsStatic() error {
	cSyscalls = make(map[string]Syscall)

	var err error
	var name string
	var cSyscall *Syscall

	name = relateSyscallName("socket")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_socket
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int family;	offset:16;	size:8;	signed:0;
	field:int type;	offset:24;	size:8;	signed:0;
	field:int protocol;	offset:32;	size:8;	signed:0;

print fmt: "family: 0x%08lx, type: 0x%08lx, protocol: 0x%08lx", ((unsigned long)(REC->family)), ((unsigned long)(REC->type)), ((unsigned long)(REC->protocol))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("socketpair")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_socketpair
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int family;	offset:16;	size:8;	signed:0;
	field:int type;	offset:24;	size:8;	signed:0;
	field:int protocol;	offset:32;	size:8;	signed:0;
	field:int * usockvec;	offset:40;	size:8;	signed:0;

print fmt: "family: 0x%08lx, type: 0x%08lx, protocol: 0x%08lx, usockvec: 0x%08lx", ((unsigned long)(REC->family)), ((unsigned long)(REC->type)), ((unsigned long)(REC->protocol)), ((unsigned long)(REC->usockvec))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("bind")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_bind
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int fd;	offset:16;	size:8;	signed:0;
	field:struct sockaddr * umyaddr;	offset:24;	size:8;	signed:0;
	field:int addrlen;	offset:32;	size:8;	signed:0;

print fmt: "fd: 0x%08lx, umyaddr: 0x%08lx, addrlen: 0x%08lx", ((unsigned long)(REC->fd)), ((unsigned long)(REC->umyaddr)), ((unsigned long)(REC->addrlen))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("listen")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_listen
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int fd;	offset:16;	size:8;	signed:0;
	field:int backlog;	offset:24;	size:8;	signed:0;

print fmt: "fd: 0x%08lx, backlog: 0x%08lx", ((unsigned long)(REC->fd)), ((unsigned long)(REC->backlog))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("accept4")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_accept4
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int fd;	offset:16;	size:8;	signed:0;
	field:struct sockaddr * upeer_sockaddr;	offset:24;	size:8;	signed:0;
	field:int * upeer_addrlen;	offset:32;	size:8;	signed:0;
	field:int flags;	offset:40;	size:8;	signed:0;

print fmt: "fd: 0x%08lx, upeer_sockaddr: 0x%08lx, upeer_addrlen: 0x%08lx, flags: 0x%08lx", ((unsigned long)(REC->fd)), ((unsigned long)(REC->upeer_sockaddr)), ((unsigned long)(REC->upeer_addrlen)), ((unsigned long)(REC->flags))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("accept")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_accept
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int fd;	offset:16;	size:8;	signed:0;
	field:struct sockaddr * upeer_sockaddr;	offset:24;	size:8;	signed:0;
	field:int * upeer_addrlen;	offset:32;	size:8;	signed:0;

print fmt: "fd: 0x%08lx, upeer_sockaddr: 0x%08lx, upeer_addrlen: 0x%08lx", ((unsigned long)(REC->fd)), ((unsigned long)(REC->upeer_sockaddr)), ((unsigned long)(REC->upeer_addrlen))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("connect")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_connect
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int fd;	offset:16;	size:8;	signed:0;
	field:struct sockaddr * uservaddr;	offset:24;	size:8;	signed:0;
	field:int addrlen;	offset:32;	size:8;	signed:0;

print fmt: "fd: 0x%08lx, uservaddr: 0x%08lx, addrlen: 0x%08lx", ((unsigned long)(REC->fd)), ((unsigned long)(REC->uservaddr)), ((unsigned long)(REC->addrlen))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("getsockname")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_getsockname
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int fd;	offset:16;	size:8;	signed:0;
	field:struct sockaddr * usockaddr;	offset:24;	size:8;	signed:0;
	field:int * usockaddr_len;	offset:32;	size:8;	signed:0;

print fmt: "fd: 0x%08lx, usockaddr: 0x%08lx, usockaddr_len: 0x%08lx", ((unsigned long)(REC->fd)), ((unsigned long)(REC->usockaddr)), ((unsigned long)(REC->usockaddr_len))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("getpeername")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_getpeername
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int fd;	offset:16;	size:8;	signed:0;
	field:struct sockaddr * usockaddr;	offset:24;	size:8;	signed:0;
	field:int * usockaddr_len;	offset:32;	size:8;	signed:0;

print fmt: "fd: 0x%08lx, usockaddr: 0x%08lx, usockaddr_len: 0x%08lx", ((unsigned long)(REC->fd)), ((unsigned long)(REC->usockaddr)), ((unsigned long)(REC->usockaddr_len))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("sendto")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_sendto
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int fd;	offset:16;	size:8;	signed:0;
	field:void * buff;	offset:24;	size:8;	signed:0;
	field:size_t len;	offset:32;	size:8;	signed:0;
	field:unsigned int flags;	offset:40;	size:8;	signed:0;
	field:struct sockaddr * addr;	offset:48;	size:8;	signed:0;
	field:int addr_len;	offset:56;	size:8;	signed:0;

print fmt: "fd: 0x%08lx, buff: 0x%08lx, len: 0x%08lx, flags: 0x%08lx, addr: 0x%08lx, addr_len: 0x%08lx", ((unsigned long)(REC->fd)), ((unsigned long)(REC->buff)), ((unsigned long)(REC->len)), ((unsigned long)(REC->flags)), ((unsigned long)(REC->addr)), ((unsigned long)(REC->addr_len))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("recvfrom")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_recvfrom
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int fd;	offset:16;	size:8;	signed:0;
	field:void * ubuf;	offset:24;	size:8;	signed:0;
	field:size_t size;	offset:32;	size:8;	signed:0;
	field:unsigned int flags;	offset:40;	size:8;	signed:0;
	field:struct sockaddr * addr;	offset:48;	size:8;	signed:0;
	field:int * addr_len;	offset:56;	size:8;	signed:0;

print fmt: "fd: 0x%08lx, ubuf: 0x%08lx, size: 0x%08lx, flags: 0x%08lx, addr: 0x%08lx, addr_len: 0x%08lx", ((unsigned long)(REC->fd)), ((unsigned long)(REC->ubuf)), ((unsigned long)(REC->size)), ((unsigned long)(REC->flags)), ((unsigned long)(REC->addr)), ((unsigned long)(REC->addr_len))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("setsockopt")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_setsockopt
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int fd;	offset:16;	size:8;	signed:0;
	field:int level;	offset:24;	size:8;	signed:0;
	field:int optname;	offset:32;	size:8;	signed:0;
	field:char * optval;	offset:40;	size:8;	signed:0;
	field:int optlen;	offset:48;	size:8;	signed:0;

print fmt: "fd: 0x%08lx, level: 0x%08lx, optname: 0x%08lx, optval: 0x%08lx, optlen: 0x%08lx", ((unsigned long)(REC->fd)), ((unsigned long)(REC->level)), ((unsigned long)(REC->optname)), ((unsigned long)(REC->optval)), ((unsigned long)(REC->optlen))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("getsockopt")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_getsockopt
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int fd;	offset:16;	size:8;	signed:0;
	field:int level;	offset:24;	size:8;	signed:0;
	field:int optname;	offset:32;	size:8;	signed:0;
	field:char * optval;	offset:40;	size:8;	signed:0;
	field:int * optlen;	offset:48;	size:8;	signed:0;

print fmt: "fd: 0x%08lx, level: 0x%08lx, optname: 0x%08lx, optval: 0x%08lx, optlen: 0x%08lx", ((unsigned long)(REC->fd)), ((unsigned long)(REC->level)), ((unsigned long)(REC->optname)), ((unsigned long)(REC->optval)), ((unsigned long)(REC->optlen))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("shutdown")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_shutdown
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int fd;	offset:16;	size:8;	signed:0;
	field:int how;	offset:24;	size:8;	signed:0;

print fmt: "fd: 0x%08lx, how: 0x%08lx", ((unsigned long)(REC->fd)), ((unsigned long)(REC->how))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("sendmsg")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_sendmsg
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int fd;	offset:16;	size:8;	signed:0;
	field:struct user_msghdr * msg;	offset:24;	size:8;	signed:0;
	field:unsigned int flags;	offset:32;	size:8;	signed:0;

print fmt: "fd: 0x%08lx, msg: 0x%08lx, flags: 0x%08lx", ((unsigned long)(REC->fd)), ((unsigned long)(REC->msg)), ((unsigned long)(REC->flags))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("sendmmsg")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_sendmmsg
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int fd;	offset:16;	size:8;	signed:0;
	field:struct mmsghdr * mmsg;	offset:24;	size:8;	signed:0;
	field:unsigned int vlen;	offset:32;	size:8;	signed:0;
	field:unsigned int flags;	offset:40;	size:8;	signed:0;

print fmt: "fd: 0x%08lx, mmsg: 0x%08lx, vlen: 0x%08lx, flags: 0x%08lx", ((unsigned long)(REC->fd)), ((unsigned long)(REC->mmsg)), ((unsigned long)(REC->vlen)), ((unsigned long)(REC->flags))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("recvmsg")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_recvmsg
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int fd;	offset:16;	size:8;	signed:0;
	field:struct user_msghdr * msg;	offset:24;	size:8;	signed:0;
	field:unsigned int flags;	offset:32;	size:8;	signed:0;

print fmt: "fd: 0x%08lx, msg: 0x%08lx, flags: 0x%08lx", ((unsigned long)(REC->fd)), ((unsigned long)(REC->msg)), ((unsigned long)(REC->flags))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("recvmmsg")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_recvmmsg
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int fd;	offset:16;	size:8;	signed:0;
	field:struct mmsghdr * mmsg;	offset:24;	size:8;	signed:0;
	field:unsigned int vlen;	offset:32;	size:8;	signed:0;
	field:unsigned int flags;	offset:40;	size:8;	signed:0;
	field:struct __kernel_timespec * timeout;	offset:48;	size:8;	signed:0;

print fmt: "fd: 0x%08lx, mmsg: 0x%08lx, vlen: 0x%08lx, flags: 0x%08lx, timeout: 0x%08lx", ((unsigned long)(REC->fd)), ((unsigned long)(REC->mmsg)), ((unsigned long)(REC->vlen)), ((unsigned long)(REC->flags)), ((unsigned long)(REC->timeout))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("getrandom")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_getrandom
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:char * buf;	offset:16;	size:8;	signed:0;
	field:size_t count;	offset:24;	size:8;	signed:0;
	field:unsigned int flags;	offset:32;	size:8;	signed:0;

print fmt: "buf: 0x%08lx, count: 0x%08lx, flags: 0x%08lx", ((unsigned long)(REC->buf)), ((unsigned long)(REC->count)), ((unsigned long)(REC->flags))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("ioprio_set")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_ioprio_set
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int which;	offset:16;	size:8;	signed:0;
	field:int who;	offset:24;	size:8;	signed:0;
	field:int ioprio;	offset:32;	size:8;	signed:0;

print fmt: "which: 0x%08lx, who: 0x%08lx, ioprio: 0x%08lx", ((unsigned long)(REC->which)), ((unsigned long)(REC->who)), ((unsigned long)(REC->ioprio))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("ioprio_get")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_ioprio_get
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int which;	offset:16;	size:8;	signed:0;
	field:int who;	offset:24;	size:8;	signed:0;

print fmt: "which: 0x%08lx, who: 0x%08lx", ((unsigned long)(REC->which)), ((unsigned long)(REC->who))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("add_key")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_add_key
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:const char * _type;	offset:16;	size:8;	signed:0;
	field:const char * _description;	offset:24;	size:8;	signed:0;
	field:const void * _payload;	offset:32;	size:8;	signed:0;
	field:size_t plen;	offset:40;	size:8;	signed:0;
	field:key_serial_t ringid;	offset:48;	size:8;	signed:0;

print fmt: "_type: 0x%08lx, _description: 0x%08lx, _payload: 0x%08lx, plen: 0x%08lx, ringid: 0x%08lx", ((unsigned long)(REC->_type)), ((unsigned long)(REC->_description)), ((unsigned long)(REC->_payload)), ((unsigned long)(REC->plen)), ((unsigned long)(REC->ringid))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("request_key")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_request_key
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:const char * _type;	offset:16;	size:8;	signed:0;
	field:const char * _description;	offset:24;	size:8;	signed:0;
	field:const char * _callout_info;	offset:32;	size:8;	signed:0;
	field:key_serial_t destringid;	offset:40;	size:8;	signed:0;

print fmt: "_type: 0x%08lx, _description: 0x%08lx, _callout_info: 0x%08lx, destringid: 0x%08lx", ((unsigned long)(REC->_type)), ((unsigned long)(REC->_description)), ((unsigned long)(REC->_callout_info)), ((unsigned long)(REC->destringid))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("keyctl")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_keyctl
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int option;	offset:16;	size:8;	signed:0;
	field:unsigned long arg2;	offset:24;	size:8;	signed:0;
	field:unsigned long arg3;	offset:32;	size:8;	signed:0;
	field:unsigned long arg4;	offset:40;	size:8;	signed:0;
	field:unsigned long arg5;	offset:48;	size:8;	signed:0;

print fmt: "option: 0x%08lx, arg2: 0x%08lx, arg3: 0x%08lx, arg4: 0x%08lx, arg5: 0x%08lx", ((unsigned long)(REC->option)), ((unsigned long)(REC->arg2)), ((unsigned long)(REC->arg3)), ((unsigned long)(REC->arg4)), ((unsigned long)(REC->arg5))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("mq_open")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_mq_open
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:const char * u_name;	offset:16;	size:8;	signed:0;
	field:int oflag;	offset:24;	size:8;	signed:0;
	field:umode_t mode;	offset:32;	size:8;	signed:0;
	field:struct mq_attr * u_attr;	offset:40;	size:8;	signed:0;

print fmt: "u_name: 0x%08lx, oflag: 0x%08lx, mode: 0x%08lx, u_attr: 0x%08lx", ((unsigned long)(REC->u_name)), ((unsigned long)(REC->oflag)), ((unsigned long)(REC->mode)), ((unsigned long)(REC->u_attr))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("mq_unlink")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_mq_unlink
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:const char * u_name;	offset:16;	size:8;	signed:0;

print fmt: "u_name: 0x%08lx", ((unsigned long)(REC->u_name))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("mq_timedsend")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_mq_timedsend
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:mqd_t mqdes;	offset:16;	size:8;	signed:0;
	field:const char * u_msg_ptr;	offset:24;	size:8;	signed:0;
	field:size_t msg_len;	offset:32;	size:8;	signed:0;
	field:unsigned int msg_prio;	offset:40;	size:8;	signed:0;
	field:const struct __kernel_timespec * u_abs_timeout;	offset:48;	size:8;	signed:0;

print fmt: "mqdes: 0x%08lx, u_msg_ptr: 0x%08lx, msg_len: 0x%08lx, msg_prio: 0x%08lx, u_abs_timeout: 0x%08lx", ((unsigned long)(REC->mqdes)), ((unsigned long)(REC->u_msg_ptr)), ((unsigned long)(REC->msg_len)), ((unsigned long)(REC->msg_prio)), ((unsigned long)(REC->u_abs_timeout))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("mq_timedreceive")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_mq_timedreceive
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:mqd_t mqdes;	offset:16;	size:8;	signed:0;
	field:char * u_msg_ptr;	offset:24;	size:8;	signed:0;
	field:size_t msg_len;	offset:32;	size:8;	signed:0;
	field:unsigned int * u_msg_prio;	offset:40;	size:8;	signed:0;
	field:const struct __kernel_timespec * u_abs_timeout;	offset:48;	size:8;	signed:0;

print fmt: "mqdes: 0x%08lx, u_msg_ptr: 0x%08lx, msg_len: 0x%08lx, u_msg_prio: 0x%08lx, u_abs_timeout: 0x%08lx", ((unsigned long)(REC->mqdes)), ((unsigned long)(REC->u_msg_ptr)), ((unsigned long)(REC->msg_len)), ((unsigned long)(REC->u_msg_prio)), ((unsigned long)(REC->u_abs_timeout))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("mq_notify")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_mq_notify
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:mqd_t mqdes;	offset:16;	size:8;	signed:0;
	field:const struct sigevent * u_notification;	offset:24;	size:8;	signed:0;

print fmt: "mqdes: 0x%08lx, u_notification: 0x%08lx", ((unsigned long)(REC->mqdes)), ((unsigned long)(REC->u_notification))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("mq_getsetattr")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_mq_getsetattr
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:mqd_t mqdes;	offset:16;	size:8;	signed:0;
	field:const struct mq_attr * u_mqstat;	offset:24;	size:8;	signed:0;
	field:struct mq_attr * u_omqstat;	offset:32;	size:8;	signed:0;

print fmt: "mqdes: 0x%08lx, u_mqstat: 0x%08lx, u_omqstat: 0x%08lx", ((unsigned long)(REC->mqdes)), ((unsigned long)(REC->u_mqstat)), ((unsigned long)(REC->u_omqstat))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("shmget")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_shmget
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:key_t key;	offset:16;	size:8;	signed:0;
	field:size_t size;	offset:24;	size:8;	signed:0;
	field:int shmflg;	offset:32;	size:8;	signed:0;

print fmt: "key: 0x%08lx, size: 0x%08lx, shmflg: 0x%08lx", ((unsigned long)(REC->key)), ((unsigned long)(REC->size)), ((unsigned long)(REC->shmflg))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("shmctl")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_shmctl
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int shmid;	offset:16;	size:8;	signed:0;
	field:int cmd;	offset:24;	size:8;	signed:0;
	field:struct shmid_ds * buf;	offset:32;	size:8;	signed:0;

print fmt: "shmid: 0x%08lx, cmd: 0x%08lx, buf: 0x%08lx", ((unsigned long)(REC->shmid)), ((unsigned long)(REC->cmd)), ((unsigned long)(REC->buf))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("shmat")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_shmat
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int shmid;	offset:16;	size:8;	signed:0;
	field:char * shmaddr;	offset:24;	size:8;	signed:0;
	field:int shmflg;	offset:32;	size:8;	signed:0;

print fmt: "shmid: 0x%08lx, shmaddr: 0x%08lx, shmflg: 0x%08lx", ((unsigned long)(REC->shmid)), ((unsigned long)(REC->shmaddr)), ((unsigned long)(REC->shmflg))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("shmdt")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_shmdt
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:char * shmaddr;	offset:16;	size:8;	signed:0;

print fmt: "shmaddr: 0x%08lx", ((unsigned long)(REC->shmaddr))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("semget")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_semget
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:key_t key;	offset:16;	size:8;	signed:0;
	field:int nsems;	offset:24;	size:8;	signed:0;
	field:int semflg;	offset:32;	size:8;	signed:0;

print fmt: "key: 0x%08lx, nsems: 0x%08lx, semflg: 0x%08lx", ((unsigned long)(REC->key)), ((unsigned long)(REC->nsems)), ((unsigned long)(REC->semflg))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("semctl")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_semctl
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int semid;	offset:16;	size:8;	signed:0;
	field:int semnum;	offset:24;	size:8;	signed:0;
	field:int cmd;	offset:32;	size:8;	signed:0;
	field:unsigned long arg;	offset:40;	size:8;	signed:0;

print fmt: "semid: 0x%08lx, semnum: 0x%08lx, cmd: 0x%08lx, arg: 0x%08lx", ((unsigned long)(REC->semid)), ((unsigned long)(REC->semnum)), ((unsigned long)(REC->cmd)), ((unsigned long)(REC->arg))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("semtimedop")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_semtimedop
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int semid;	offset:16;	size:8;	signed:0;
	field:struct sembuf * tsops;	offset:24;	size:8;	signed:0;
	field:unsigned int nsops;	offset:32;	size:8;	signed:0;
	field:const struct __kernel_timespec * timeout;	offset:40;	size:8;	signed:0;

print fmt: "semid: 0x%08lx, tsops: 0x%08lx, nsops: 0x%08lx, timeout: 0x%08lx", ((unsigned long)(REC->semid)), ((unsigned long)(REC->tsops)), ((unsigned long)(REC->nsops)), ((unsigned long)(REC->timeout))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("semop")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_semop
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int semid;	offset:16;	size:8;	signed:0;
	field:struct sembuf * tsops;	offset:24;	size:8;	signed:0;
	field:unsigned nsops;	offset:32;	size:8;	signed:0;

print fmt: "semid: 0x%08lx, tsops: 0x%08lx, nsops: 0x%08lx", ((unsigned long)(REC->semid)), ((unsigned long)(REC->tsops)), ((unsigned long)(REC->nsops))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("msgget")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_msgget
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:key_t key;	offset:16;	size:8;	signed:0;
	field:int msgflg;	offset:24;	size:8;	signed:0;

print fmt: "key: 0x%08lx, msgflg: 0x%08lx", ((unsigned long)(REC->key)), ((unsigned long)(REC->msgflg))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("msgctl")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_msgctl
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int msqid;	offset:16;	size:8;	signed:0;
	field:int cmd;	offset:24;	size:8;	signed:0;
	field:struct msqid_ds * buf;	offset:32;	size:8;	signed:0;

print fmt: "msqid: 0x%08lx, cmd: 0x%08lx, buf: 0x%08lx", ((unsigned long)(REC->msqid)), ((unsigned long)(REC->cmd)), ((unsigned long)(REC->buf))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("msgsnd")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_msgsnd
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int msqid;	offset:16;	size:8;	signed:0;
	field:struct msgbuf * msgp;	offset:24;	size:8;	signed:0;
	field:size_t msgsz;	offset:32;	size:8;	signed:0;
	field:int msgflg;	offset:40;	size:8;	signed:0;

print fmt: "msqid: 0x%08lx, msgp: 0x%08lx, msgsz: 0x%08lx, msgflg: 0x%08lx", ((unsigned long)(REC->msqid)), ((unsigned long)(REC->msgp)), ((unsigned long)(REC->msgsz)), ((unsigned long)(REC->msgflg))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("msgrcv")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_msgrcv
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int msqid;	offset:16;	size:8;	signed:0;
	field:struct msgbuf * msgp;	offset:24;	size:8;	signed:0;
	field:size_t msgsz;	offset:32;	size:8;	signed:0;
	field:long msgtyp;	offset:40;	size:8;	signed:0;
	field:int msgflg;	offset:48;	size:8;	signed:0;

print fmt: "msqid: 0x%08lx, msgp: 0x%08lx, msgsz: 0x%08lx, msgtyp: 0x%08lx, msgflg: 0x%08lx", ((unsigned long)(REC->msqid)), ((unsigned long)(REC->msgp)), ((unsigned long)(REC->msgsz)), ((unsigned long)(REC->msgtyp)), ((unsigned long)(REC->msgflg))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("lookup_dcookie")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_lookup_dcookie
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:u64 cookie64;	offset:16;	size:8;	signed:0;
	field:char * buf;	offset:24;	size:8;	signed:0;
	field:size_t len;	offset:32;	size:8;	signed:0;

print fmt: "cookie64: 0x%08lx, buf: 0x%08lx, len: 0x%08lx", ((unsigned long)(REC->cookie64)), ((unsigned long)(REC->buf)), ((unsigned long)(REC->len))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("quotactl")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_quotactl
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:unsigned int cmd;	offset:16;	size:8;	signed:0;
	field:const char * special;	offset:24;	size:8;	signed:0;
	field:qid_t id;	offset:32;	size:8;	signed:0;
	field:void * addr;	offset:40;	size:8;	signed:0;

print fmt: "cmd: 0x%08lx, special: 0x%08lx, id: 0x%08lx, addr: 0x%08lx", ((unsigned long)(REC->cmd)), ((unsigned long)(REC->special)), ((unsigned long)(REC->id)), ((unsigned long)(REC->addr))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("name_to_handle_at")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_name_to_handle_at
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int dfd;	offset:16;	size:8;	signed:0;
	field:const char * name;	offset:24;	size:8;	signed:0;
	field:struct file_handle * handle;	offset:32;	size:8;	signed:0;
	field:int * mnt_id;	offset:40;	size:8;	signed:0;
	field:int flag;	offset:48;	size:8;	signed:0;

print fmt: "dfd: 0x%08lx, name: 0x%08lx, handle: 0x%08lx, mnt_id: 0x%08lx, flag: 0x%08lx", ((unsigned long)(REC->dfd)), ((unsigned long)(REC->name)), ((unsigned long)(REC->handle)), ((unsigned long)(REC->mnt_id)), ((unsigned long)(REC->flag))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("open_by_handle_at")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_open_by_handle_at
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int mountdirfd;	offset:16;	size:8;	signed:0;
	field:struct file_handle * handle;	offset:24;	size:8;	signed:0;
	field:int flags;	offset:32;	size:8;	signed:0;

print fmt: "mountdirfd: 0x%08lx, handle: 0x%08lx, flags: 0x%08lx", ((unsigned long)(REC->mountdirfd)), ((unsigned long)(REC->handle)), ((unsigned long)(REC->flags))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("flock")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_flock
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:unsigned int fd;	offset:16;	size:8;	signed:0;
	field:unsigned int cmd;	offset:24;	size:8;	signed:0;

print fmt: "fd: 0x%08lx, cmd: 0x%08lx", ((unsigned long)(REC->fd)), ((unsigned long)(REC->cmd))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("io_uring_enter")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_io_uring_enter
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:unsigned int fd;	offset:16;	size:8;	signed:0;
	field:u32 to_submit;	offset:24;	size:8;	signed:0;
	field:u32 min_complete;	offset:32;	size:8;	signed:0;
	field:u32 flags;	offset:40;	size:8;	signed:0;
	field:const sigset_t * sig;	offset:48;	size:8;	signed:0;
	field:size_t sigsz;	offset:56;	size:8;	signed:0;

print fmt: "fd: 0x%08lx, to_submit: 0x%08lx, min_complete: 0x%08lx, flags: 0x%08lx, sig: 0x%08lx, sigsz: 0x%08lx", ((unsigned long)(REC->fd)), ((unsigned long)(REC->to_submit)), ((unsigned long)(REC->min_complete)), ((unsigned long)(REC->flags)), ((unsigned long)(REC->sig)), ((unsigned long)(REC->sigsz))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("io_uring_setup")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_io_uring_setup
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:u32 entries;	offset:16;	size:8;	signed:0;
	field:struct io_uring_params * params;	offset:24;	size:8;	signed:0;

print fmt: "entries: 0x%08lx, params: 0x%08lx", ((unsigned long)(REC->entries)), ((unsigned long)(REC->params))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("io_uring_register")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_io_uring_register
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:unsigned int fd;	offset:16;	size:8;	signed:0;
	field:unsigned int opcode;	offset:24;	size:8;	signed:0;
	field:void * arg;	offset:32;	size:8;	signed:0;
	field:unsigned int nr_args;	offset:40;	size:8;	signed:0;

print fmt: "fd: 0x%08lx, opcode: 0x%08lx, arg: 0x%08lx, nr_args: 0x%08lx", ((unsigned long)(REC->fd)), ((unsigned long)(REC->opcode)), ((unsigned long)(REC->arg)), ((unsigned long)(REC->nr_args))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("io_setup")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_io_setup
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:unsigned nr_events;	offset:16;	size:8;	signed:0;
	field:aio_context_t * ctxp;	offset:24;	size:8;	signed:0;

print fmt: "nr_events: 0x%08lx, ctxp: 0x%08lx", ((unsigned long)(REC->nr_events)), ((unsigned long)(REC->ctxp))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("io_destroy")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_io_destroy
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:aio_context_t ctx;	offset:16;	size:8;	signed:0;

print fmt: "ctx: 0x%08lx", ((unsigned long)(REC->ctx))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("io_submit")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_io_submit
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:aio_context_t ctx_id;	offset:16;	size:8;	signed:0;
	field:long nr;	offset:24;	size:8;	signed:0;
	field:struct iocb * * iocbpp;	offset:32;	size:8;	signed:0;

print fmt: "ctx_id: 0x%08lx, nr: 0x%08lx, iocbpp: 0x%08lx", ((unsigned long)(REC->ctx_id)), ((unsigned long)(REC->nr)), ((unsigned long)(REC->iocbpp))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("io_cancel")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_io_cancel
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:aio_context_t ctx_id;	offset:16;	size:8;	signed:0;
	field:struct iocb * iocb;	offset:24;	size:8;	signed:0;
	field:struct io_event * result;	offset:32;	size:8;	signed:0;

print fmt: "ctx_id: 0x%08lx, iocb: 0x%08lx, result: 0x%08lx", ((unsigned long)(REC->ctx_id)), ((unsigned long)(REC->iocb)), ((unsigned long)(REC->result))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("io_getevents")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_io_getevents
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:aio_context_t ctx_id;	offset:16;	size:8;	signed:0;
	field:long min_nr;	offset:24;	size:8;	signed:0;
	field:long nr;	offset:32;	size:8;	signed:0;
	field:struct io_event * events;	offset:40;	size:8;	signed:0;
	field:struct __kernel_timespec * timeout;	offset:48;	size:8;	signed:0;

print fmt: "ctx_id: 0x%08lx, min_nr: 0x%08lx, nr: 0x%08lx, events: 0x%08lx, timeout: 0x%08lx", ((unsigned long)(REC->ctx_id)), ((unsigned long)(REC->min_nr)), ((unsigned long)(REC->nr)), ((unsigned long)(REC->events)), ((unsigned long)(REC->timeout))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("io_pgetevents")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_io_pgetevents
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:aio_context_t ctx_id;	offset:16;	size:8;	signed:0;
	field:long min_nr;	offset:24;	size:8;	signed:0;
	field:long nr;	offset:32;	size:8;	signed:0;
	field:struct io_event * events;	offset:40;	size:8;	signed:0;
	field:struct __kernel_timespec * timeout;	offset:48;	size:8;	signed:0;
	field:const struct __aio_sigset * usig;	offset:56;	size:8;	signed:0;

print fmt: "ctx_id: 0x%08lx, min_nr: 0x%08lx, nr: 0x%08lx, events: 0x%08lx, timeout: 0x%08lx, usig: 0x%08lx", ((unsigned long)(REC->ctx_id)), ((unsigned long)(REC->min_nr)), ((unsigned long)(REC->nr)), ((unsigned long)(REC->events)), ((unsigned long)(REC->timeout)), ((unsigned long)(REC->usig))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("userfaultfd")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_userfaultfd
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int flags;	offset:16;	size:8;	signed:0;

print fmt: "flags: 0x%08lx", ((unsigned long)(REC->flags))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("eventfd2")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_eventfd2
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:unsigned int count;	offset:16;	size:8;	signed:0;
	field:int flags;	offset:24;	size:8;	signed:0;

print fmt: "count: 0x%08lx, flags: 0x%08lx", ((unsigned long)(REC->count)), ((unsigned long)(REC->flags))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("eventfd")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_eventfd
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:unsigned int count;	offset:16;	size:8;	signed:0;

print fmt: "count: 0x%08lx", ((unsigned long)(REC->count))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("timerfd_create")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_timerfd_create
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int clockid;	offset:16;	size:8;	signed:0;
	field:int flags;	offset:24;	size:8;	signed:0;

print fmt: "clockid: 0x%08lx, flags: 0x%08lx", ((unsigned long)(REC->clockid)), ((unsigned long)(REC->flags))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("timerfd_settime")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_timerfd_settime
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int ufd;	offset:16;	size:8;	signed:0;
	field:int flags;	offset:24;	size:8;	signed:0;
	field:const struct __kernel_itimerspec * utmr;	offset:32;	size:8;	signed:0;
	field:struct __kernel_itimerspec * otmr;	offset:40;	size:8;	signed:0;

print fmt: "ufd: 0x%08lx, flags: 0x%08lx, utmr: 0x%08lx, otmr: 0x%08lx", ((unsigned long)(REC->ufd)), ((unsigned long)(REC->flags)), ((unsigned long)(REC->utmr)), ((unsigned long)(REC->otmr))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("timerfd_gettime")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_timerfd_gettime
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int ufd;	offset:16;	size:8;	signed:0;
	field:struct __kernel_itimerspec * otmr;	offset:24;	size:8;	signed:0;

print fmt: "ufd: 0x%08lx, otmr: 0x%08lx", ((unsigned long)(REC->ufd)), ((unsigned long)(REC->otmr))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("signalfd4")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_signalfd4
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int ufd;	offset:16;	size:8;	signed:0;
	field:sigset_t * user_mask;	offset:24;	size:8;	signed:0;
	field:size_t sizemask;	offset:32;	size:8;	signed:0;
	field:int flags;	offset:40;	size:8;	signed:0;

print fmt: "ufd: 0x%08lx, user_mask: 0x%08lx, sizemask: 0x%08lx, flags: 0x%08lx", ((unsigned long)(REC->ufd)), ((unsigned long)(REC->user_mask)), ((unsigned long)(REC->sizemask)), ((unsigned long)(REC->flags))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("signalfd")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_signalfd
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int ufd;	offset:16;	size:8;	signed:0;
	field:sigset_t * user_mask;	offset:24;	size:8;	signed:0;
	field:size_t sizemask;	offset:32;	size:8;	signed:0;

print fmt: "ufd: 0x%08lx, user_mask: 0x%08lx, sizemask: 0x%08lx", ((unsigned long)(REC->ufd)), ((unsigned long)(REC->user_mask)), ((unsigned long)(REC->sizemask))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("epoll_create1")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_epoll_create1
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int flags;	offset:16;	size:8;	signed:0;

print fmt: "flags: 0x%08lx", ((unsigned long)(REC->flags))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("epoll_create")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_epoll_create
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int size;	offset:16;	size:8;	signed:0;

print fmt: "size: 0x%08lx", ((unsigned long)(REC->size))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("epoll_ctl")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_epoll_ctl
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int epfd;	offset:16;	size:8;	signed:0;
	field:int op;	offset:24;	size:8;	signed:0;
	field:int fd;	offset:32;	size:8;	signed:0;
	field:struct epoll_event * event;	offset:40;	size:8;	signed:0;

print fmt: "epfd: 0x%08lx, op: 0x%08lx, fd: 0x%08lx, event: 0x%08lx", ((unsigned long)(REC->epfd)), ((unsigned long)(REC->op)), ((unsigned long)(REC->fd)), ((unsigned long)(REC->event))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("epoll_wait")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_epoll_wait
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int epfd;	offset:16;	size:8;	signed:0;
	field:struct epoll_event * events;	offset:24;	size:8;	signed:0;
	field:int maxevents;	offset:32;	size:8;	signed:0;
	field:int timeout;	offset:40;	size:8;	signed:0;

print fmt: "epfd: 0x%08lx, events: 0x%08lx, maxevents: 0x%08lx, timeout: 0x%08lx", ((unsigned long)(REC->epfd)), ((unsigned long)(REC->events)), ((unsigned long)(REC->maxevents)), ((unsigned long)(REC->timeout))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("epoll_pwait")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_epoll_pwait
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int epfd;	offset:16;	size:8;	signed:0;
	field:struct epoll_event * events;	offset:24;	size:8;	signed:0;
	field:int maxevents;	offset:32;	size:8;	signed:0;
	field:int timeout;	offset:40;	size:8;	signed:0;
	field:const sigset_t * sigmask;	offset:48;	size:8;	signed:0;
	field:size_t sigsetsize;	offset:56;	size:8;	signed:0;

print fmt: "epfd: 0x%08lx, events: 0x%08lx, maxevents: 0x%08lx, timeout: 0x%08lx, sigmask: 0x%08lx, sigsetsize: 0x%08lx", ((unsigned long)(REC->epfd)), ((unsigned long)(REC->events)), ((unsigned long)(REC->maxevents)), ((unsigned long)(REC->timeout)), ((unsigned long)(REC->sigmask)), ((unsigned long)(REC->sigsetsize))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("fanotify_init")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_fanotify_init
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:unsigned int flags;	offset:16;	size:8;	signed:0;
	field:unsigned int event_f_flags;	offset:24;	size:8;	signed:0;

print fmt: "flags: 0x%08lx, event_f_flags: 0x%08lx", ((unsigned long)(REC->flags)), ((unsigned long)(REC->event_f_flags))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("fanotify_mark")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_fanotify_mark
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int fanotify_fd;	offset:16;	size:8;	signed:0;
	field:unsigned int flags;	offset:24;	size:8;	signed:0;
	field:__u64 mask;	offset:32;	size:8;	signed:0;
	field:int dfd;	offset:40;	size:8;	signed:0;
	field:const char * pathname;	offset:48;	size:8;	signed:0;

print fmt: "fanotify_fd: 0x%08lx, flags: 0x%08lx, mask: 0x%08lx, dfd: 0x%08lx, pathname: 0x%08lx", ((unsigned long)(REC->fanotify_fd)), ((unsigned long)(REC->flags)), ((unsigned long)(REC->mask)), ((unsigned long)(REC->dfd)), ((unsigned long)(REC->pathname))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("inotify_init1")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_inotify_init1
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int flags;	offset:16;	size:8;	signed:0;

print fmt: "flags: 0x%08lx", ((unsigned long)(REC->flags))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("inotify_init")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_inotify_init
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;

print fmt: ""
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("inotify_add_watch")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_inotify_add_watch
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int fd;	offset:16;	size:8;	signed:0;
	field:const char * pathname;	offset:24;	size:8;	signed:0;
	field:u32 mask;	offset:32;	size:8;	signed:0;

print fmt: "fd: 0x%08lx, pathname: 0x%08lx, mask: 0x%08lx", ((unsigned long)(REC->fd)), ((unsigned long)(REC->pathname)), ((unsigned long)(REC->mask))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("inotify_rm_watch")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_inotify_rm_watch
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int fd;	offset:16;	size:8;	signed:0;
	field:__s32 wd;	offset:24;	size:8;	signed:0;

print fmt: "fd: 0x%08lx, wd: 0x%08lx", ((unsigned long)(REC->fd)), ((unsigned long)(REC->wd))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("fsopen")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_fsopen
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:const char * _fs_name;	offset:16;	size:8;	signed:0;
	field:unsigned int flags;	offset:24;	size:8;	signed:0;

print fmt: "_fs_name: 0x%08lx, flags: 0x%08lx", ((unsigned long)(REC->_fs_name)), ((unsigned long)(REC->flags))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("fspick")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_fspick
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int dfd;	offset:16;	size:8;	signed:0;
	field:const char * path;	offset:24;	size:8;	signed:0;
	field:unsigned int flags;	offset:32;	size:8;	signed:0;

print fmt: "dfd: 0x%08lx, path: 0x%08lx, flags: 0x%08lx", ((unsigned long)(REC->dfd)), ((unsigned long)(REC->path)), ((unsigned long)(REC->flags))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("fsconfig")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_fsconfig
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int fd;	offset:16;	size:8;	signed:0;
	field:unsigned int cmd;	offset:24;	size:8;	signed:0;
	field:const char * _key;	offset:32;	size:8;	signed:0;
	field:const void * _value;	offset:40;	size:8;	signed:0;
	field:int aux;	offset:48;	size:8;	signed:0;

print fmt: "fd: 0x%08lx, cmd: 0x%08lx, _key: 0x%08lx, _value: 0x%08lx, aux: 0x%08lx", ((unsigned long)(REC->fd)), ((unsigned long)(REC->cmd)), ((unsigned long)(REC->_key)), ((unsigned long)(REC->_value)), ((unsigned long)(REC->aux))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("statfs")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_statfs
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:const char * pathname;	offset:16;	size:8;	signed:0;
	field:struct statfs * buf;	offset:24;	size:8;	signed:0;

print fmt: "pathname: 0x%08lx, buf: 0x%08lx", ((unsigned long)(REC->pathname)), ((unsigned long)(REC->buf))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("fstatfs")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_fstatfs
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:unsigned int fd;	offset:16;	size:8;	signed:0;
	field:struct statfs * buf;	offset:24;	size:8;	signed:0;

print fmt: "fd: 0x%08lx, buf: 0x%08lx", ((unsigned long)(REC->fd)), ((unsigned long)(REC->buf))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("ustat")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_ustat
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:unsigned dev;	offset:16;	size:8;	signed:0;
	field:struct ustat * ubuf;	offset:24;	size:8;	signed:0;

print fmt: "dev: 0x%08lx, ubuf: 0x%08lx", ((unsigned long)(REC->dev)), ((unsigned long)(REC->ubuf))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("getcwd")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_getcwd
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:char * buf;	offset:16;	size:8;	signed:0;
	field:unsigned long size;	offset:24;	size:8;	signed:0;

print fmt: "buf: 0x%08lx, size: 0x%08lx", ((unsigned long)(REC->buf)), ((unsigned long)(REC->size))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("utimensat")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_utimensat
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int dfd;	offset:16;	size:8;	signed:0;
	field:const char * filename;	offset:24;	size:8;	signed:0;
	field:struct __kernel_timespec * utimes;	offset:32;	size:8;	signed:0;
	field:int flags;	offset:40;	size:8;	signed:0;

print fmt: "dfd: 0x%08lx, filename: 0x%08lx, utimes: 0x%08lx, flags: 0x%08lx", ((unsigned long)(REC->dfd)), ((unsigned long)(REC->filename)), ((unsigned long)(REC->utimes)), ((unsigned long)(REC->flags))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("futimesat")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_futimesat
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int dfd;	offset:16;	size:8;	signed:0;
	field:const char * filename;	offset:24;	size:8;	signed:0;
	field:struct __kernel_old_timeval * utimes;	offset:32;	size:8;	signed:0;

print fmt: "dfd: 0x%08lx, filename: 0x%08lx, utimes: 0x%08lx", ((unsigned long)(REC->dfd)), ((unsigned long)(REC->filename)), ((unsigned long)(REC->utimes))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("utimes")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_utimes
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:char * filename;	offset:16;	size:8;	signed:0;
	field:struct __kernel_old_timeval * utimes;	offset:24;	size:8;	signed:0;

print fmt: "filename: 0x%08lx, utimes: 0x%08lx", ((unsigned long)(REC->filename)), ((unsigned long)(REC->utimes))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("utime")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_utime
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:char * filename;	offset:16;	size:8;	signed:0;
	field:struct utimbuf * times;	offset:24;	size:8;	signed:0;

print fmt: "filename: 0x%08lx, times: 0x%08lx", ((unsigned long)(REC->filename)), ((unsigned long)(REC->times))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("sync")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_sync
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;

print fmt: ""
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("syncfs")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_syncfs
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int fd;	offset:16;	size:8;	signed:0;

print fmt: "fd: 0x%08lx", ((unsigned long)(REC->fd))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("fsync")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_fsync
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:unsigned int fd;	offset:16;	size:8;	signed:0;

print fmt: "fd: 0x%08lx", ((unsigned long)(REC->fd))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("fdatasync")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_fdatasync
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:unsigned int fd;	offset:16;	size:8;	signed:0;

print fmt: "fd: 0x%08lx", ((unsigned long)(REC->fd))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("sync_file_range")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_sync_file_range
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int fd;	offset:16;	size:8;	signed:0;
	field:loff_t offset;	offset:24;	size:8;	signed:0;
	field:loff_t nbytes;	offset:32;	size:8;	signed:0;
	field:unsigned int flags;	offset:40;	size:8;	signed:0;

print fmt: "fd: 0x%08lx, offset: 0x%08lx, nbytes: 0x%08lx, flags: 0x%08lx", ((unsigned long)(REC->fd)), ((unsigned long)(REC->offset)), ((unsigned long)(REC->nbytes)), ((unsigned long)(REC->flags))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("vmsplice")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_vmsplice
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int fd;	offset:16;	size:8;	signed:0;
	field:const struct iovec * uiov;	offset:24;	size:8;	signed:0;
	field:unsigned long nr_segs;	offset:32;	size:8;	signed:0;
	field:unsigned int flags;	offset:40;	size:8;	signed:0;

print fmt: "fd: 0x%08lx, uiov: 0x%08lx, nr_segs: 0x%08lx, flags: 0x%08lx", ((unsigned long)(REC->fd)), ((unsigned long)(REC->uiov)), ((unsigned long)(REC->nr_segs)), ((unsigned long)(REC->flags))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("splice")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_splice
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int fd_in;	offset:16;	size:8;	signed:0;
	field:loff_t * off_in;	offset:24;	size:8;	signed:0;
	field:int fd_out;	offset:32;	size:8;	signed:0;
	field:loff_t * off_out;	offset:40;	size:8;	signed:0;
	field:size_t len;	offset:48;	size:8;	signed:0;
	field:unsigned int flags;	offset:56;	size:8;	signed:0;

print fmt: "fd_in: 0x%08lx, off_in: 0x%08lx, fd_out: 0x%08lx, off_out: 0x%08lx, len: 0x%08lx, flags: 0x%08lx", ((unsigned long)(REC->fd_in)), ((unsigned long)(REC->off_in)), ((unsigned long)(REC->fd_out)), ((unsigned long)(REC->off_out)), ((unsigned long)(REC->len)), ((unsigned long)(REC->flags))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("tee")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_tee
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int fdin;	offset:16;	size:8;	signed:0;
	field:int fdout;	offset:24;	size:8;	signed:0;
	field:size_t len;	offset:32;	size:8;	signed:0;
	field:unsigned int flags;	offset:40;	size:8;	signed:0;

print fmt: "fdin: 0x%08lx, fdout: 0x%08lx, len: 0x%08lx, flags: 0x%08lx", ((unsigned long)(REC->fdin)), ((unsigned long)(REC->fdout)), ((unsigned long)(REC->len)), ((unsigned long)(REC->flags))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("setxattr")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_setxattr
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:const char * pathname;	offset:16;	size:8;	signed:0;
	field:const char * name;	offset:24;	size:8;	signed:0;
	field:const void * value;	offset:32;	size:8;	signed:0;
	field:size_t size;	offset:40;	size:8;	signed:0;
	field:int flags;	offset:48;	size:8;	signed:0;

print fmt: "pathname: 0x%08lx, name: 0x%08lx, value: 0x%08lx, size: 0x%08lx, flags: 0x%08lx", ((unsigned long)(REC->pathname)), ((unsigned long)(REC->name)), ((unsigned long)(REC->value)), ((unsigned long)(REC->size)), ((unsigned long)(REC->flags))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("lsetxattr")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_lsetxattr
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:const char * pathname;	offset:16;	size:8;	signed:0;
	field:const char * name;	offset:24;	size:8;	signed:0;
	field:const void * value;	offset:32;	size:8;	signed:0;
	field:size_t size;	offset:40;	size:8;	signed:0;
	field:int flags;	offset:48;	size:8;	signed:0;

print fmt: "pathname: 0x%08lx, name: 0x%08lx, value: 0x%08lx, size: 0x%08lx, flags: 0x%08lx", ((unsigned long)(REC->pathname)), ((unsigned long)(REC->name)), ((unsigned long)(REC->value)), ((unsigned long)(REC->size)), ((unsigned long)(REC->flags))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("fsetxattr")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_fsetxattr
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int fd;	offset:16;	size:8;	signed:0;
	field:const char * name;	offset:24;	size:8;	signed:0;
	field:const void * value;	offset:32;	size:8;	signed:0;
	field:size_t size;	offset:40;	size:8;	signed:0;
	field:int flags;	offset:48;	size:8;	signed:0;

print fmt: "fd: 0x%08lx, name: 0x%08lx, value: 0x%08lx, size: 0x%08lx, flags: 0x%08lx", ((unsigned long)(REC->fd)), ((unsigned long)(REC->name)), ((unsigned long)(REC->value)), ((unsigned long)(REC->size)), ((unsigned long)(REC->flags))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("getxattr")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_getxattr
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:const char * pathname;	offset:16;	size:8;	signed:0;
	field:const char * name;	offset:24;	size:8;	signed:0;
	field:void * value;	offset:32;	size:8;	signed:0;
	field:size_t size;	offset:40;	size:8;	signed:0;

print fmt: "pathname: 0x%08lx, name: 0x%08lx, value: 0x%08lx, size: 0x%08lx", ((unsigned long)(REC->pathname)), ((unsigned long)(REC->name)), ((unsigned long)(REC->value)), ((unsigned long)(REC->size))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("lgetxattr")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_lgetxattr
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:const char * pathname;	offset:16;	size:8;	signed:0;
	field:const char * name;	offset:24;	size:8;	signed:0;
	field:void * value;	offset:32;	size:8;	signed:0;
	field:size_t size;	offset:40;	size:8;	signed:0;

print fmt: "pathname: 0x%08lx, name: 0x%08lx, value: 0x%08lx, size: 0x%08lx", ((unsigned long)(REC->pathname)), ((unsigned long)(REC->name)), ((unsigned long)(REC->value)), ((unsigned long)(REC->size))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("fgetxattr")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_fgetxattr
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int fd;	offset:16;	size:8;	signed:0;
	field:const char * name;	offset:24;	size:8;	signed:0;
	field:void * value;	offset:32;	size:8;	signed:0;
	field:size_t size;	offset:40;	size:8;	signed:0;

print fmt: "fd: 0x%08lx, name: 0x%08lx, value: 0x%08lx, size: 0x%08lx", ((unsigned long)(REC->fd)), ((unsigned long)(REC->name)), ((unsigned long)(REC->value)), ((unsigned long)(REC->size))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("listxattr")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_listxattr
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:const char * pathname;	offset:16;	size:8;	signed:0;
	field:char * list;	offset:24;	size:8;	signed:0;
	field:size_t size;	offset:32;	size:8;	signed:0;

print fmt: "pathname: 0x%08lx, list: 0x%08lx, size: 0x%08lx", ((unsigned long)(REC->pathname)), ((unsigned long)(REC->list)), ((unsigned long)(REC->size))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("llistxattr")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_llistxattr
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:const char * pathname;	offset:16;	size:8;	signed:0;
	field:char * list;	offset:24;	size:8;	signed:0;
	field:size_t size;	offset:32;	size:8;	signed:0;

print fmt: "pathname: 0x%08lx, list: 0x%08lx, size: 0x%08lx", ((unsigned long)(REC->pathname)), ((unsigned long)(REC->list)), ((unsigned long)(REC->size))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("flistxattr")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_flistxattr
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int fd;	offset:16;	size:8;	signed:0;
	field:char * list;	offset:24;	size:8;	signed:0;
	field:size_t size;	offset:32;	size:8;	signed:0;

print fmt: "fd: 0x%08lx, list: 0x%08lx, size: 0x%08lx", ((unsigned long)(REC->fd)), ((unsigned long)(REC->list)), ((unsigned long)(REC->size))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("removexattr")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_removexattr
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:const char * pathname;	offset:16;	size:8;	signed:0;
	field:const char * name;	offset:24;	size:8;	signed:0;

print fmt: "pathname: 0x%08lx, name: 0x%08lx", ((unsigned long)(REC->pathname)), ((unsigned long)(REC->name))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("lremovexattr")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_lremovexattr
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:const char * pathname;	offset:16;	size:8;	signed:0;
	field:const char * name;	offset:24;	size:8;	signed:0;

print fmt: "pathname: 0x%08lx, name: 0x%08lx", ((unsigned long)(REC->pathname)), ((unsigned long)(REC->name))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("fremovexattr")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_fremovexattr
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int fd;	offset:16;	size:8;	signed:0;
	field:const char * name;	offset:24;	size:8;	signed:0;

print fmt: "fd: 0x%08lx, name: 0x%08lx", ((unsigned long)(REC->fd)), ((unsigned long)(REC->name))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("umount")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_umount
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:char * name;	offset:16;	size:8;	signed:0;
	field:int flags;	offset:24;	size:8;	signed:0;

print fmt: "name: 0x%08lx, flags: 0x%08lx", ((unsigned long)(REC->name)), ((unsigned long)(REC->flags))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("open_tree")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_open_tree
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int dfd;	offset:16;	size:8;	signed:0;
	field:const char * filename;	offset:24;	size:8;	signed:0;
	field:unsigned flags;	offset:32;	size:8;	signed:0;

print fmt: "dfd: 0x%08lx, filename: 0x%08lx, flags: 0x%08lx", ((unsigned long)(REC->dfd)), ((unsigned long)(REC->filename)), ((unsigned long)(REC->flags))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("mount")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_mount
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:char * dev_name;	offset:16;	size:8;	signed:0;
	field:char * dir_name;	offset:24;	size:8;	signed:0;
	field:char * type;	offset:32;	size:8;	signed:0;
	field:unsigned long flags;	offset:40;	size:8;	signed:0;
	field:void * data;	offset:48;	size:8;	signed:0;

print fmt: "dev_name: 0x%08lx, dir_name: 0x%08lx, type: 0x%08lx, flags: 0x%08lx, data: 0x%08lx", ((unsigned long)(REC->dev_name)), ((unsigned long)(REC->dir_name)), ((unsigned long)(REC->type)), ((unsigned long)(REC->flags)), ((unsigned long)(REC->data))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("fsmount")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_fsmount
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int fs_fd;	offset:16;	size:8;	signed:0;
	field:unsigned int flags;	offset:24;	size:8;	signed:0;
	field:unsigned int attr_flags;	offset:32;	size:8;	signed:0;

print fmt: "fs_fd: 0x%08lx, flags: 0x%08lx, attr_flags: 0x%08lx", ((unsigned long)(REC->fs_fd)), ((unsigned long)(REC->flags)), ((unsigned long)(REC->attr_flags))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("move_mount")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_move_mount
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int from_dfd;	offset:16;	size:8;	signed:0;
	field:const char * from_pathname;	offset:24;	size:8;	signed:0;
	field:int to_dfd;	offset:32;	size:8;	signed:0;
	field:const char * to_pathname;	offset:40;	size:8;	signed:0;
	field:unsigned int flags;	offset:48;	size:8;	signed:0;

print fmt: "from_dfd: 0x%08lx, from_pathname: 0x%08lx, to_dfd: 0x%08lx, to_pathname: 0x%08lx, flags: 0x%08lx", ((unsigned long)(REC->from_dfd)), ((unsigned long)(REC->from_pathname)), ((unsigned long)(REC->to_dfd)), ((unsigned long)(REC->to_pathname)), ((unsigned long)(REC->flags))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("pivot_root")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_pivot_root
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:const char * new_root;	offset:16;	size:8;	signed:0;
	field:const char * put_old;	offset:24;	size:8;	signed:0;

print fmt: "new_root: 0x%08lx, put_old: 0x%08lx", ((unsigned long)(REC->new_root)), ((unsigned long)(REC->put_old))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("sysfs")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_sysfs
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int option;	offset:16;	size:8;	signed:0;
	field:unsigned long arg1;	offset:24;	size:8;	signed:0;
	field:unsigned long arg2;	offset:32;	size:8;	signed:0;

print fmt: "option: 0x%08lx, arg1: 0x%08lx, arg2: 0x%08lx", ((unsigned long)(REC->option)), ((unsigned long)(REC->arg1)), ((unsigned long)(REC->arg2))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("dup3")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_dup3
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:unsigned int oldfd;	offset:16;	size:8;	signed:0;
	field:unsigned int newfd;	offset:24;	size:8;	signed:0;
	field:int flags;	offset:32;	size:8;	signed:0;

print fmt: "oldfd: 0x%08lx, newfd: 0x%08lx, flags: 0x%08lx", ((unsigned long)(REC->oldfd)), ((unsigned long)(REC->newfd)), ((unsigned long)(REC->flags))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("dup2")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_dup2
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:unsigned int oldfd;	offset:16;	size:8;	signed:0;
	field:unsigned int newfd;	offset:24;	size:8;	signed:0;

print fmt: "oldfd: 0x%08lx, newfd: 0x%08lx", ((unsigned long)(REC->oldfd)), ((unsigned long)(REC->newfd))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("dup")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_dup
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:unsigned int fildes;	offset:16;	size:8;	signed:0;

print fmt: "fildes: 0x%08lx", ((unsigned long)(REC->fildes))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("select")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_select
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int n;	offset:16;	size:8;	signed:0;
	field:fd_set * inp;	offset:24;	size:8;	signed:0;
	field:fd_set * outp;	offset:32;	size:8;	signed:0;
	field:fd_set * exp;	offset:40;	size:8;	signed:0;
	field:struct __kernel_old_timeval * tvp;	offset:48;	size:8;	signed:0;

print fmt: "n: 0x%08lx, inp: 0x%08lx, outp: 0x%08lx, exp: 0x%08lx, tvp: 0x%08lx", ((unsigned long)(REC->n)), ((unsigned long)(REC->inp)), ((unsigned long)(REC->outp)), ((unsigned long)(REC->exp)), ((unsigned long)(REC->tvp))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("pselect6")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_pselect6
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int n;	offset:16;	size:8;	signed:0;
	field:fd_set * inp;	offset:24;	size:8;	signed:0;
	field:fd_set * outp;	offset:32;	size:8;	signed:0;
	field:fd_set * exp;	offset:40;	size:8;	signed:0;
	field:struct __kernel_timespec * tsp;	offset:48;	size:8;	signed:0;
	field:void * sig;	offset:56;	size:8;	signed:0;

print fmt: "n: 0x%08lx, inp: 0x%08lx, outp: 0x%08lx, exp: 0x%08lx, tsp: 0x%08lx, sig: 0x%08lx", ((unsigned long)(REC->n)), ((unsigned long)(REC->inp)), ((unsigned long)(REC->outp)), ((unsigned long)(REC->exp)), ((unsigned long)(REC->tsp)), ((unsigned long)(REC->sig))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("poll")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_poll
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:struct pollfd * ufds;	offset:16;	size:8;	signed:0;
	field:unsigned int nfds;	offset:24;	size:8;	signed:0;
	field:int timeout_msecs;	offset:32;	size:8;	signed:0;

print fmt: "ufds: 0x%08lx, nfds: 0x%08lx, timeout_msecs: 0x%08lx", ((unsigned long)(REC->ufds)), ((unsigned long)(REC->nfds)), ((unsigned long)(REC->timeout_msecs))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("ppoll")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_ppoll
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:struct pollfd * ufds;	offset:16;	size:8;	signed:0;
	field:unsigned int nfds;	offset:24;	size:8;	signed:0;
	field:struct __kernel_timespec * tsp;	offset:32;	size:8;	signed:0;
	field:const sigset_t * sigmask;	offset:40;	size:8;	signed:0;
	field:size_t sigsetsize;	offset:48;	size:8;	signed:0;

print fmt: "ufds: 0x%08lx, nfds: 0x%08lx, tsp: 0x%08lx, sigmask: 0x%08lx, sigsetsize: 0x%08lx", ((unsigned long)(REC->ufds)), ((unsigned long)(REC->nfds)), ((unsigned long)(REC->tsp)), ((unsigned long)(REC->sigmask)), ((unsigned long)(REC->sigsetsize))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("getdents")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_getdents
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:unsigned int fd;	offset:16;	size:8;	signed:0;
	field:struct linux_dirent * dirent;	offset:24;	size:8;	signed:0;
	field:unsigned int count;	offset:32;	size:8;	signed:0;

print fmt: "fd: 0x%08lx, dirent: 0x%08lx, count: 0x%08lx", ((unsigned long)(REC->fd)), ((unsigned long)(REC->dirent)), ((unsigned long)(REC->count))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("getdents64")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_getdents64
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:unsigned int fd;	offset:16;	size:8;	signed:0;
	field:struct linux_dirent64 * dirent;	offset:24;	size:8;	signed:0;
	field:unsigned int count;	offset:32;	size:8;	signed:0;

print fmt: "fd: 0x%08lx, dirent: 0x%08lx, count: 0x%08lx", ((unsigned long)(REC->fd)), ((unsigned long)(REC->dirent)), ((unsigned long)(REC->count))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("ioctl")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_ioctl
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:unsigned int fd;	offset:16;	size:8;	signed:0;
	field:unsigned int cmd;	offset:24;	size:8;	signed:0;
	field:unsigned long arg;	offset:32;	size:8;	signed:0;

print fmt: "fd: 0x%08lx, cmd: 0x%08lx, arg: 0x%08lx", ((unsigned long)(REC->fd)), ((unsigned long)(REC->cmd)), ((unsigned long)(REC->arg))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("fcntl")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_fcntl
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:unsigned int fd;	offset:16;	size:8;	signed:0;
	field:unsigned int cmd;	offset:24;	size:8;	signed:0;
	field:unsigned long arg;	offset:32;	size:8;	signed:0;

print fmt: "fd: 0x%08lx, cmd: 0x%08lx, arg: 0x%08lx", ((unsigned long)(REC->fd)), ((unsigned long)(REC->cmd)), ((unsigned long)(REC->arg))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("mknodat")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_mknodat
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int dfd;	offset:16;	size:8;	signed:0;
	field:const char * filename;	offset:24;	size:8;	signed:0;
	field:umode_t mode;	offset:32;	size:8;	signed:0;
	field:unsigned int dev;	offset:40;	size:8;	signed:0;

print fmt: "dfd: 0x%08lx, filename: 0x%08lx, mode: 0x%08lx, dev: 0x%08lx", ((unsigned long)(REC->dfd)), ((unsigned long)(REC->filename)), ((unsigned long)(REC->mode)), ((unsigned long)(REC->dev))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("mknod")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_mknod
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:const char * filename;	offset:16;	size:8;	signed:0;
	field:umode_t mode;	offset:24;	size:8;	signed:0;
	field:unsigned dev;	offset:32;	size:8;	signed:0;

print fmt: "filename: 0x%08lx, mode: 0x%08lx, dev: 0x%08lx", ((unsigned long)(REC->filename)), ((unsigned long)(REC->mode)), ((unsigned long)(REC->dev))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("mkdirat")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_mkdirat
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int dfd;	offset:16;	size:8;	signed:0;
	field:const char * pathname;	offset:24;	size:8;	signed:0;
	field:umode_t mode;	offset:32;	size:8;	signed:0;

print fmt: "dfd: 0x%08lx, pathname: 0x%08lx, mode: 0x%08lx", ((unsigned long)(REC->dfd)), ((unsigned long)(REC->pathname)), ((unsigned long)(REC->mode))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("mkdir")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_mkdir
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:const char * pathname;	offset:16;	size:8;	signed:0;
	field:umode_t mode;	offset:24;	size:8;	signed:0;

print fmt: "pathname: 0x%08lx, mode: 0x%08lx", ((unsigned long)(REC->pathname)), ((unsigned long)(REC->mode))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("rmdir")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_rmdir
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:const char * pathname;	offset:16;	size:8;	signed:0;

print fmt: "pathname: 0x%08lx", ((unsigned long)(REC->pathname))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("unlinkat")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_unlinkat
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int dfd;	offset:16;	size:8;	signed:0;
	field:const char * pathname;	offset:24;	size:8;	signed:0;
	field:int flag;	offset:32;	size:8;	signed:0;

print fmt: "dfd: 0x%08lx, pathname: 0x%08lx, flag: 0x%08lx", ((unsigned long)(REC->dfd)), ((unsigned long)(REC->pathname)), ((unsigned long)(REC->flag))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("unlink")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_unlink
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:const char * pathname;	offset:16;	size:8;	signed:0;

print fmt: "pathname: 0x%08lx", ((unsigned long)(REC->pathname))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("symlinkat")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_symlinkat
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:const char * oldname;	offset:16;	size:8;	signed:0;
	field:int newdfd;	offset:24;	size:8;	signed:0;
	field:const char * newname;	offset:32;	size:8;	signed:0;

print fmt: "oldname: 0x%08lx, newdfd: 0x%08lx, newname: 0x%08lx", ((unsigned long)(REC->oldname)), ((unsigned long)(REC->newdfd)), ((unsigned long)(REC->newname))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("symlink")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_symlink
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:const char * oldname;	offset:16;	size:8;	signed:0;
	field:const char * newname;	offset:24;	size:8;	signed:0;

print fmt: "oldname: 0x%08lx, newname: 0x%08lx", ((unsigned long)(REC->oldname)), ((unsigned long)(REC->newname))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("linkat")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_linkat
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int olddfd;	offset:16;	size:8;	signed:0;
	field:const char * oldname;	offset:24;	size:8;	signed:0;
	field:int newdfd;	offset:32;	size:8;	signed:0;
	field:const char * newname;	offset:40;	size:8;	signed:0;
	field:int flags;	offset:48;	size:8;	signed:0;

print fmt: "olddfd: 0x%08lx, oldname: 0x%08lx, newdfd: 0x%08lx, newname: 0x%08lx, flags: 0x%08lx", ((unsigned long)(REC->olddfd)), ((unsigned long)(REC->oldname)), ((unsigned long)(REC->newdfd)), ((unsigned long)(REC->newname)), ((unsigned long)(REC->flags))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("link")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_link
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:const char * oldname;	offset:16;	size:8;	signed:0;
	field:const char * newname;	offset:24;	size:8;	signed:0;

print fmt: "oldname: 0x%08lx, newname: 0x%08lx", ((unsigned long)(REC->oldname)), ((unsigned long)(REC->newname))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("renameat2")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_renameat2
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int olddfd;	offset:16;	size:8;	signed:0;
	field:const char * oldname;	offset:24;	size:8;	signed:0;
	field:int newdfd;	offset:32;	size:8;	signed:0;
	field:const char * newname;	offset:40;	size:8;	signed:0;
	field:unsigned int flags;	offset:48;	size:8;	signed:0;

print fmt: "olddfd: 0x%08lx, oldname: 0x%08lx, newdfd: 0x%08lx, newname: 0x%08lx, flags: 0x%08lx", ((unsigned long)(REC->olddfd)), ((unsigned long)(REC->oldname)), ((unsigned long)(REC->newdfd)), ((unsigned long)(REC->newname)), ((unsigned long)(REC->flags))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("renameat")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_renameat
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int olddfd;	offset:16;	size:8;	signed:0;
	field:const char * oldname;	offset:24;	size:8;	signed:0;
	field:int newdfd;	offset:32;	size:8;	signed:0;
	field:const char * newname;	offset:40;	size:8;	signed:0;

print fmt: "olddfd: 0x%08lx, oldname: 0x%08lx, newdfd: 0x%08lx, newname: 0x%08lx", ((unsigned long)(REC->olddfd)), ((unsigned long)(REC->oldname)), ((unsigned long)(REC->newdfd)), ((unsigned long)(REC->newname))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("rename")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_rename
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:const char * oldname;	offset:16;	size:8;	signed:0;
	field:const char * newname;	offset:24;	size:8;	signed:0;

print fmt: "oldname: 0x%08lx, newname: 0x%08lx", ((unsigned long)(REC->oldname)), ((unsigned long)(REC->newname))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("pipe2")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_pipe2
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int * fildes;	offset:16;	size:8;	signed:0;
	field:int flags;	offset:24;	size:8;	signed:0;

print fmt: "fildes: 0x%08lx, flags: 0x%08lx", ((unsigned long)(REC->fildes)), ((unsigned long)(REC->flags))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("pipe")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_pipe
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int * fildes;	offset:16;	size:8;	signed:0;

print fmt: "fildes: 0x%08lx", ((unsigned long)(REC->fildes))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("execve")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_execve
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:const char * filename;	offset:16;	size:8;	signed:0;
	field:const char *const * argv;	offset:24;	size:8;	signed:0;
	field:const char *const * envp;	offset:32;	size:8;	signed:0;

print fmt: "filename: 0x%08lx, argv: 0x%08lx, envp: 0x%08lx", ((unsigned long)(REC->filename)), ((unsigned long)(REC->argv)), ((unsigned long)(REC->envp))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("execveat")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_execveat
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int fd;	offset:16;	size:8;	signed:0;
	field:const char * filename;	offset:24;	size:8;	signed:0;
	field:const char *const * argv;	offset:32;	size:8;	signed:0;
	field:const char *const * envp;	offset:40;	size:8;	signed:0;
	field:int flags;	offset:48;	size:8;	signed:0;

print fmt: "fd: 0x%08lx, filename: 0x%08lx, argv: 0x%08lx, envp: 0x%08lx, flags: 0x%08lx", ((unsigned long)(REC->fd)), ((unsigned long)(REC->filename)), ((unsigned long)(REC->argv)), ((unsigned long)(REC->envp)), ((unsigned long)(REC->flags))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("newstat")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_newstat
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:const char * filename;	offset:16;	size:8;	signed:0;
	field:struct stat * statbuf;	offset:24;	size:8;	signed:0;

print fmt: "filename: 0x%08lx, statbuf: 0x%08lx", ((unsigned long)(REC->filename)), ((unsigned long)(REC->statbuf))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("newlstat")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_newlstat
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:const char * filename;	offset:16;	size:8;	signed:0;
	field:struct stat * statbuf;	offset:24;	size:8;	signed:0;

print fmt: "filename: 0x%08lx, statbuf: 0x%08lx", ((unsigned long)(REC->filename)), ((unsigned long)(REC->statbuf))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("newfstatat")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_newfstatat
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int dfd;	offset:16;	size:8;	signed:0;
	field:const char * filename;	offset:24;	size:8;	signed:0;
	field:struct stat * statbuf;	offset:32;	size:8;	signed:0;
	field:int flag;	offset:40;	size:8;	signed:0;

print fmt: "dfd: 0x%08lx, filename: 0x%08lx, statbuf: 0x%08lx, flag: 0x%08lx", ((unsigned long)(REC->dfd)), ((unsigned long)(REC->filename)), ((unsigned long)(REC->statbuf)), ((unsigned long)(REC->flag))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("newfstat")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_newfstat
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:unsigned int fd;	offset:16;	size:8;	signed:0;
	field:struct stat * statbuf;	offset:24;	size:8;	signed:0;

print fmt: "fd: 0x%08lx, statbuf: 0x%08lx", ((unsigned long)(REC->fd)), ((unsigned long)(REC->statbuf))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("readlinkat")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_readlinkat
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int dfd;	offset:16;	size:8;	signed:0;
	field:const char * pathname;	offset:24;	size:8;	signed:0;
	field:char * buf;	offset:32;	size:8;	signed:0;
	field:int bufsiz;	offset:40;	size:8;	signed:0;

print fmt: "dfd: 0x%08lx, pathname: 0x%08lx, buf: 0x%08lx, bufsiz: 0x%08lx", ((unsigned long)(REC->dfd)), ((unsigned long)(REC->pathname)), ((unsigned long)(REC->buf)), ((unsigned long)(REC->bufsiz))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("readlink")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_readlink
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:const char * path;	offset:16;	size:8;	signed:0;
	field:char * buf;	offset:24;	size:8;	signed:0;
	field:int bufsiz;	offset:32;	size:8;	signed:0;

print fmt: "path: 0x%08lx, buf: 0x%08lx, bufsiz: 0x%08lx", ((unsigned long)(REC->path)), ((unsigned long)(REC->buf)), ((unsigned long)(REC->bufsiz))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("statx")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_statx
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int dfd;	offset:16;	size:8;	signed:0;
	field:const char * filename;	offset:24;	size:8;	signed:0;
	field:unsigned flags;	offset:32;	size:8;	signed:0;
	field:unsigned int mask;	offset:40;	size:8;	signed:0;
	field:struct statx * buffer;	offset:48;	size:8;	signed:0;

print fmt: "dfd: 0x%08lx, filename: 0x%08lx, flags: 0x%08lx, mask: 0x%08lx, buffer: 0x%08lx", ((unsigned long)(REC->dfd)), ((unsigned long)(REC->filename)), ((unsigned long)(REC->flags)), ((unsigned long)(REC->mask)), ((unsigned long)(REC->buffer))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("lseek")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_lseek
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:unsigned int fd;	offset:16;	size:8;	signed:0;
	field:off_t offset;	offset:24;	size:8;	signed:0;
	field:unsigned int whence;	offset:32;	size:8;	signed:0;

print fmt: "fd: 0x%08lx, offset: 0x%08lx, whence: 0x%08lx", ((unsigned long)(REC->fd)), ((unsigned long)(REC->offset)), ((unsigned long)(REC->whence))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("read")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_read
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:unsigned int fd;	offset:16;	size:8;	signed:0;
	field:char * buf;	offset:24;	size:8;	signed:0;
	field:size_t count;	offset:32;	size:8;	signed:0;

print fmt: "fd: 0x%08lx, buf: 0x%08lx, count: 0x%08lx", ((unsigned long)(REC->fd)), ((unsigned long)(REC->buf)), ((unsigned long)(REC->count))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("write")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_write
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:unsigned int fd;	offset:16;	size:8;	signed:0;
	field:const char * buf;	offset:24;	size:8;	signed:0;
	field:size_t count;	offset:32;	size:8;	signed:0;

print fmt: "fd: 0x%08lx, buf: 0x%08lx, count: 0x%08lx", ((unsigned long)(REC->fd)), ((unsigned long)(REC->buf)), ((unsigned long)(REC->count))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("pread64")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_pread64
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:unsigned int fd;	offset:16;	size:8;	signed:0;
	field:char * buf;	offset:24;	size:8;	signed:0;
	field:size_t count;	offset:32;	size:8;	signed:0;
	field:loff_t pos;	offset:40;	size:8;	signed:0;

print fmt: "fd: 0x%08lx, buf: 0x%08lx, count: 0x%08lx, pos: 0x%08lx", ((unsigned long)(REC->fd)), ((unsigned long)(REC->buf)), ((unsigned long)(REC->count)), ((unsigned long)(REC->pos))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("pwrite64")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_pwrite64
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:unsigned int fd;	offset:16;	size:8;	signed:0;
	field:const char * buf;	offset:24;	size:8;	signed:0;
	field:size_t count;	offset:32;	size:8;	signed:0;
	field:loff_t pos;	offset:40;	size:8;	signed:0;

print fmt: "fd: 0x%08lx, buf: 0x%08lx, count: 0x%08lx, pos: 0x%08lx", ((unsigned long)(REC->fd)), ((unsigned long)(REC->buf)), ((unsigned long)(REC->count)), ((unsigned long)(REC->pos))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("readv")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_readv
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:unsigned long fd;	offset:16;	size:8;	signed:0;
	field:const struct iovec * vec;	offset:24;	size:8;	signed:0;
	field:unsigned long vlen;	offset:32;	size:8;	signed:0;

print fmt: "fd: 0x%08lx, vec: 0x%08lx, vlen: 0x%08lx", ((unsigned long)(REC->fd)), ((unsigned long)(REC->vec)), ((unsigned long)(REC->vlen))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("writev")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_writev
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:unsigned long fd;	offset:16;	size:8;	signed:0;
	field:const struct iovec * vec;	offset:24;	size:8;	signed:0;
	field:unsigned long vlen;	offset:32;	size:8;	signed:0;

print fmt: "fd: 0x%08lx, vec: 0x%08lx, vlen: 0x%08lx", ((unsigned long)(REC->fd)), ((unsigned long)(REC->vec)), ((unsigned long)(REC->vlen))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("preadv")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_preadv
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:unsigned long fd;	offset:16;	size:8;	signed:0;
	field:const struct iovec * vec;	offset:24;	size:8;	signed:0;
	field:unsigned long vlen;	offset:32;	size:8;	signed:0;
	field:unsigned long pos_l;	offset:40;	size:8;	signed:0;
	field:unsigned long pos_h;	offset:48;	size:8;	signed:0;

print fmt: "fd: 0x%08lx, vec: 0x%08lx, vlen: 0x%08lx, pos_l: 0x%08lx, pos_h: 0x%08lx", ((unsigned long)(REC->fd)), ((unsigned long)(REC->vec)), ((unsigned long)(REC->vlen)), ((unsigned long)(REC->pos_l)), ((unsigned long)(REC->pos_h))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("preadv2")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_preadv2
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:unsigned long fd;	offset:16;	size:8;	signed:0;
	field:const struct iovec * vec;	offset:24;	size:8;	signed:0;
	field:unsigned long vlen;	offset:32;	size:8;	signed:0;
	field:unsigned long pos_l;	offset:40;	size:8;	signed:0;
	field:unsigned long pos_h;	offset:48;	size:8;	signed:0;
	field:rwf_t flags;	offset:56;	size:8;	signed:0;

print fmt: "fd: 0x%08lx, vec: 0x%08lx, vlen: 0x%08lx, pos_l: 0x%08lx, pos_h: 0x%08lx, flags: 0x%08lx", ((unsigned long)(REC->fd)), ((unsigned long)(REC->vec)), ((unsigned long)(REC->vlen)), ((unsigned long)(REC->pos_l)), ((unsigned long)(REC->pos_h)), ((unsigned long)(REC->flags))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("pwritev")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_pwritev
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:unsigned long fd;	offset:16;	size:8;	signed:0;
	field:const struct iovec * vec;	offset:24;	size:8;	signed:0;
	field:unsigned long vlen;	offset:32;	size:8;	signed:0;
	field:unsigned long pos_l;	offset:40;	size:8;	signed:0;
	field:unsigned long pos_h;	offset:48;	size:8;	signed:0;

print fmt: "fd: 0x%08lx, vec: 0x%08lx, vlen: 0x%08lx, pos_l: 0x%08lx, pos_h: 0x%08lx", ((unsigned long)(REC->fd)), ((unsigned long)(REC->vec)), ((unsigned long)(REC->vlen)), ((unsigned long)(REC->pos_l)), ((unsigned long)(REC->pos_h))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("pwritev2")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_pwritev2
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:unsigned long fd;	offset:16;	size:8;	signed:0;
	field:const struct iovec * vec;	offset:24;	size:8;	signed:0;
	field:unsigned long vlen;	offset:32;	size:8;	signed:0;
	field:unsigned long pos_l;	offset:40;	size:8;	signed:0;
	field:unsigned long pos_h;	offset:48;	size:8;	signed:0;
	field:rwf_t flags;	offset:56;	size:8;	signed:0;

print fmt: "fd: 0x%08lx, vec: 0x%08lx, vlen: 0x%08lx, pos_l: 0x%08lx, pos_h: 0x%08lx, flags: 0x%08lx", ((unsigned long)(REC->fd)), ((unsigned long)(REC->vec)), ((unsigned long)(REC->vlen)), ((unsigned long)(REC->pos_l)), ((unsigned long)(REC->pos_h)), ((unsigned long)(REC->flags))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("sendfile64")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_sendfile64
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int out_fd;	offset:16;	size:8;	signed:0;
	field:int in_fd;	offset:24;	size:8;	signed:0;
	field:loff_t * offset;	offset:32;	size:8;	signed:0;
	field:size_t count;	offset:40;	size:8;	signed:0;

print fmt: "out_fd: 0x%08lx, in_fd: 0x%08lx, offset: 0x%08lx, count: 0x%08lx", ((unsigned long)(REC->out_fd)), ((unsigned long)(REC->in_fd)), ((unsigned long)(REC->offset)), ((unsigned long)(REC->count))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("copy_file_range")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_copy_file_range
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int fd_in;	offset:16;	size:8;	signed:0;
	field:loff_t * off_in;	offset:24;	size:8;	signed:0;
	field:int fd_out;	offset:32;	size:8;	signed:0;
	field:loff_t * off_out;	offset:40;	size:8;	signed:0;
	field:size_t len;	offset:48;	size:8;	signed:0;
	field:unsigned int flags;	offset:56;	size:8;	signed:0;

print fmt: "fd_in: 0x%08lx, off_in: 0x%08lx, fd_out: 0x%08lx, off_out: 0x%08lx, len: 0x%08lx, flags: 0x%08lx", ((unsigned long)(REC->fd_in)), ((unsigned long)(REC->off_in)), ((unsigned long)(REC->fd_out)), ((unsigned long)(REC->off_out)), ((unsigned long)(REC->len)), ((unsigned long)(REC->flags))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("truncate")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_truncate
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:const char * path;	offset:16;	size:8;	signed:0;
	field:long length;	offset:24;	size:8;	signed:0;

print fmt: "path: 0x%08lx, length: 0x%08lx", ((unsigned long)(REC->path)), ((unsigned long)(REC->length))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("ftruncate")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_ftruncate
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:unsigned int fd;	offset:16;	size:8;	signed:0;
	field:unsigned long length;	offset:24;	size:8;	signed:0;

print fmt: "fd: 0x%08lx, length: 0x%08lx", ((unsigned long)(REC->fd)), ((unsigned long)(REC->length))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("fallocate")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_fallocate
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int fd;	offset:16;	size:8;	signed:0;
	field:int mode;	offset:24;	size:8;	signed:0;
	field:loff_t offset;	offset:32;	size:8;	signed:0;
	field:loff_t len;	offset:40;	size:8;	signed:0;

print fmt: "fd: 0x%08lx, mode: 0x%08lx, offset: 0x%08lx, len: 0x%08lx", ((unsigned long)(REC->fd)), ((unsigned long)(REC->mode)), ((unsigned long)(REC->offset)), ((unsigned long)(REC->len))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("faccessat")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_faccessat
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int dfd;	offset:16;	size:8;	signed:0;
	field:const char * filename;	offset:24;	size:8;	signed:0;
	field:int mode;	offset:32;	size:8;	signed:0;

print fmt: "dfd: 0x%08lx, filename: 0x%08lx, mode: 0x%08lx", ((unsigned long)(REC->dfd)), ((unsigned long)(REC->filename)), ((unsigned long)(REC->mode))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("access")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_access
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:const char * filename;	offset:16;	size:8;	signed:0;
	field:int mode;	offset:24;	size:8;	signed:0;

print fmt: "filename: 0x%08lx, mode: 0x%08lx", ((unsigned long)(REC->filename)), ((unsigned long)(REC->mode))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("chdir")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_chdir
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:const char * filename;	offset:16;	size:8;	signed:0;

print fmt: "filename: 0x%08lx", ((unsigned long)(REC->filename))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("fchdir")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_fchdir
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:unsigned int fd;	offset:16;	size:8;	signed:0;

print fmt: "fd: 0x%08lx", ((unsigned long)(REC->fd))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("chroot")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_chroot
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:const char * filename;	offset:16;	size:8;	signed:0;

print fmt: "filename: 0x%08lx", ((unsigned long)(REC->filename))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("fchmod")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_fchmod
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:unsigned int fd;	offset:16;	size:8;	signed:0;
	field:umode_t mode;	offset:24;	size:8;	signed:0;

print fmt: "fd: 0x%08lx, mode: 0x%08lx", ((unsigned long)(REC->fd)), ((unsigned long)(REC->mode))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("fchmodat")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_fchmodat
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int dfd;	offset:16;	size:8;	signed:0;
	field:const char * filename;	offset:24;	size:8;	signed:0;
	field:umode_t mode;	offset:32;	size:8;	signed:0;

print fmt: "dfd: 0x%08lx, filename: 0x%08lx, mode: 0x%08lx", ((unsigned long)(REC->dfd)), ((unsigned long)(REC->filename)), ((unsigned long)(REC->mode))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("chmod")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_chmod
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:const char * filename;	offset:16;	size:8;	signed:0;
	field:umode_t mode;	offset:24;	size:8;	signed:0;

print fmt: "filename: 0x%08lx, mode: 0x%08lx", ((unsigned long)(REC->filename)), ((unsigned long)(REC->mode))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("fchownat")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_fchownat
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int dfd;	offset:16;	size:8;	signed:0;
	field:const char * filename;	offset:24;	size:8;	signed:0;
	field:uid_t user;	offset:32;	size:8;	signed:0;
	field:gid_t group;	offset:40;	size:8;	signed:0;
	field:int flag;	offset:48;	size:8;	signed:0;

print fmt: "dfd: 0x%08lx, filename: 0x%08lx, user: 0x%08lx, group: 0x%08lx, flag: 0x%08lx", ((unsigned long)(REC->dfd)), ((unsigned long)(REC->filename)), ((unsigned long)(REC->user)), ((unsigned long)(REC->group)), ((unsigned long)(REC->flag))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("chown")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_chown
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:const char * filename;	offset:16;	size:8;	signed:0;
	field:uid_t user;	offset:24;	size:8;	signed:0;
	field:gid_t group;	offset:32;	size:8;	signed:0;

print fmt: "filename: 0x%08lx, user: 0x%08lx, group: 0x%08lx", ((unsigned long)(REC->filename)), ((unsigned long)(REC->user)), ((unsigned long)(REC->group))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("lchown")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_lchown
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:const char * filename;	offset:16;	size:8;	signed:0;
	field:uid_t user;	offset:24;	size:8;	signed:0;
	field:gid_t group;	offset:32;	size:8;	signed:0;

print fmt: "filename: 0x%08lx, user: 0x%08lx, group: 0x%08lx", ((unsigned long)(REC->filename)), ((unsigned long)(REC->user)), ((unsigned long)(REC->group))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("fchown")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_fchown
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:unsigned int fd;	offset:16;	size:8;	signed:0;
	field:uid_t user;	offset:24;	size:8;	signed:0;
	field:gid_t group;	offset:32;	size:8;	signed:0;

print fmt: "fd: 0x%08lx, user: 0x%08lx, group: 0x%08lx", ((unsigned long)(REC->fd)), ((unsigned long)(REC->user)), ((unsigned long)(REC->group))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("open")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_open
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:const char * filename;	offset:16;	size:8;	signed:0;
	field:int flags;	offset:24;	size:8;	signed:0;
	field:umode_t mode;	offset:32;	size:8;	signed:0;

print fmt: "filename: 0x%08lx, flags: 0x%08lx, mode: 0x%08lx", ((unsigned long)(REC->filename)), ((unsigned long)(REC->flags)), ((unsigned long)(REC->mode))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("openat")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_openat
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int dfd;	offset:16;	size:8;	signed:0;
	field:const char * filename;	offset:24;	size:8;	signed:0;
	field:int flags;	offset:32;	size:8;	signed:0;
	field:umode_t mode;	offset:40;	size:8;	signed:0;

print fmt: "dfd: 0x%08lx, filename: 0x%08lx, flags: 0x%08lx, mode: 0x%08lx", ((unsigned long)(REC->dfd)), ((unsigned long)(REC->filename)), ((unsigned long)(REC->flags)), ((unsigned long)(REC->mode))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("openat2")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_openat2
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int dfd;	offset:16;	size:8;	signed:0;
	field:const char * filename;	offset:24;	size:8;	signed:0;
	field:struct open_how * how;	offset:32;	size:8;	signed:0;
	field:size_t usize;	offset:40;	size:8;	signed:0;

print fmt: "dfd: 0x%08lx, filename: 0x%08lx, how: 0x%08lx, usize: 0x%08lx", ((unsigned long)(REC->dfd)), ((unsigned long)(REC->filename)), ((unsigned long)(REC->how)), ((unsigned long)(REC->usize))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("creat")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_creat
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:const char * pathname;	offset:16;	size:8;	signed:0;
	field:umode_t mode;	offset:24;	size:8;	signed:0;

print fmt: "pathname: 0x%08lx, mode: 0x%08lx", ((unsigned long)(REC->pathname)), ((unsigned long)(REC->mode))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("close")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_close
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:unsigned int fd;	offset:16;	size:8;	signed:0;

print fmt: "fd: 0x%08lx", ((unsigned long)(REC->fd))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("vhangup")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_vhangup
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;

print fmt: ""
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("memfd_create")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_memfd_create
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:const char * uname;	offset:16;	size:8;	signed:0;
	field:unsigned int flags;	offset:24;	size:8;	signed:0;

print fmt: "uname: 0x%08lx, flags: 0x%08lx", ((unsigned long)(REC->uname)), ((unsigned long)(REC->flags))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("move_pages")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_move_pages
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:pid_t pid;	offset:16;	size:8;	signed:0;
	field:unsigned long nr_pages;	offset:24;	size:8;	signed:0;
	field:const void * * pages;	offset:32;	size:8;	signed:0;
	field:const int * nodes;	offset:40;	size:8;	signed:0;
	field:int * status;	offset:48;	size:8;	signed:0;
	field:int flags;	offset:56;	size:8;	signed:0;

print fmt: "pid: 0x%08lx, nr_pages: 0x%08lx, pages: 0x%08lx, nodes: 0x%08lx, status: 0x%08lx, flags: 0x%08lx", ((unsigned long)(REC->pid)), ((unsigned long)(REC->nr_pages)), ((unsigned long)(REC->pages)), ((unsigned long)(REC->nodes)), ((unsigned long)(REC->status)), ((unsigned long)(REC->flags))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("mbind")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_mbind
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:unsigned long start;	offset:16;	size:8;	signed:0;
	field:unsigned long len;	offset:24;	size:8;	signed:0;
	field:unsigned long mode;	offset:32;	size:8;	signed:0;
	field:const unsigned long * nmask;	offset:40;	size:8;	signed:0;
	field:unsigned long maxnode;	offset:48;	size:8;	signed:0;
	field:unsigned int flags;	offset:56;	size:8;	signed:0;

print fmt: "start: 0x%08lx, len: 0x%08lx, mode: 0x%08lx, nmask: 0x%08lx, maxnode: 0x%08lx, flags: 0x%08lx", ((unsigned long)(REC->start)), ((unsigned long)(REC->len)), ((unsigned long)(REC->mode)), ((unsigned long)(REC->nmask)), ((unsigned long)(REC->maxnode)), ((unsigned long)(REC->flags))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("set_mempolicy")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_set_mempolicy
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int mode;	offset:16;	size:8;	signed:0;
	field:const unsigned long * nmask;	offset:24;	size:8;	signed:0;
	field:unsigned long maxnode;	offset:32;	size:8;	signed:0;

print fmt: "mode: 0x%08lx, nmask: 0x%08lx, maxnode: 0x%08lx", ((unsigned long)(REC->mode)), ((unsigned long)(REC->nmask)), ((unsigned long)(REC->maxnode))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("migrate_pages")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_migrate_pages
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:pid_t pid;	offset:16;	size:8;	signed:0;
	field:unsigned long maxnode;	offset:24;	size:8;	signed:0;
	field:const unsigned long * old_nodes;	offset:32;	size:8;	signed:0;
	field:const unsigned long * new_nodes;	offset:40;	size:8;	signed:0;

print fmt: "pid: 0x%08lx, maxnode: 0x%08lx, old_nodes: 0x%08lx, new_nodes: 0x%08lx", ((unsigned long)(REC->pid)), ((unsigned long)(REC->maxnode)), ((unsigned long)(REC->old_nodes)), ((unsigned long)(REC->new_nodes))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("get_mempolicy")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_get_mempolicy
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int * policy;	offset:16;	size:8;	signed:0;
	field:unsigned long * nmask;	offset:24;	size:8;	signed:0;
	field:unsigned long maxnode;	offset:32;	size:8;	signed:0;
	field:unsigned long addr;	offset:40;	size:8;	signed:0;
	field:unsigned long flags;	offset:48;	size:8;	signed:0;

print fmt: "policy: 0x%08lx, nmask: 0x%08lx, maxnode: 0x%08lx, addr: 0x%08lx, flags: 0x%08lx", ((unsigned long)(REC->policy)), ((unsigned long)(REC->nmask)), ((unsigned long)(REC->maxnode)), ((unsigned long)(REC->addr)), ((unsigned long)(REC->flags))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("swapoff")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_swapoff
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:const char * specialfile;	offset:16;	size:8;	signed:0;

print fmt: "specialfile: 0x%08lx", ((unsigned long)(REC->specialfile))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("swapon")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_swapon
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:const char * specialfile;	offset:16;	size:8;	signed:0;
	field:int swap_flags;	offset:24;	size:8;	signed:0;

print fmt: "specialfile: 0x%08lx, swap_flags: 0x%08lx", ((unsigned long)(REC->specialfile)), ((unsigned long)(REC->swap_flags))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("madvise")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_madvise
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:unsigned long start;	offset:16;	size:8;	signed:0;
	field:size_t len_in;	offset:24;	size:8;	signed:0;
	field:int behavior;	offset:32;	size:8;	signed:0;

print fmt: "start: 0x%08lx, len_in: 0x%08lx, behavior: 0x%08lx", ((unsigned long)(REC->start)), ((unsigned long)(REC->len_in)), ((unsigned long)(REC->behavior))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("process_vm_readv")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_process_vm_readv
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:pid_t pid;	offset:16;	size:8;	signed:0;
	field:const struct iovec * lvec;	offset:24;	size:8;	signed:0;
	field:unsigned long liovcnt;	offset:32;	size:8;	signed:0;
	field:const struct iovec * rvec;	offset:40;	size:8;	signed:0;
	field:unsigned long riovcnt;	offset:48;	size:8;	signed:0;
	field:unsigned long flags;	offset:56;	size:8;	signed:0;

print fmt: "pid: 0x%08lx, lvec: 0x%08lx, liovcnt: 0x%08lx, rvec: 0x%08lx, riovcnt: 0x%08lx, flags: 0x%08lx", ((unsigned long)(REC->pid)), ((unsigned long)(REC->lvec)), ((unsigned long)(REC->liovcnt)), ((unsigned long)(REC->rvec)), ((unsigned long)(REC->riovcnt)), ((unsigned long)(REC->flags))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("process_vm_writev")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_process_vm_writev
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:pid_t pid;	offset:16;	size:8;	signed:0;
	field:const struct iovec * lvec;	offset:24;	size:8;	signed:0;
	field:unsigned long liovcnt;	offset:32;	size:8;	signed:0;
	field:const struct iovec * rvec;	offset:40;	size:8;	signed:0;
	field:unsigned long riovcnt;	offset:48;	size:8;	signed:0;
	field:unsigned long flags;	offset:56;	size:8;	signed:0;

print fmt: "pid: 0x%08lx, lvec: 0x%08lx, liovcnt: 0x%08lx, rvec: 0x%08lx, riovcnt: 0x%08lx, flags: 0x%08lx", ((unsigned long)(REC->pid)), ((unsigned long)(REC->lvec)), ((unsigned long)(REC->liovcnt)), ((unsigned long)(REC->rvec)), ((unsigned long)(REC->riovcnt)), ((unsigned long)(REC->flags))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("msync")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_msync
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:unsigned long start;	offset:16;	size:8;	signed:0;
	field:size_t len;	offset:24;	size:8;	signed:0;
	field:int flags;	offset:32;	size:8;	signed:0;

print fmt: "start: 0x%08lx, len: 0x%08lx, flags: 0x%08lx", ((unsigned long)(REC->start)), ((unsigned long)(REC->len)), ((unsigned long)(REC->flags))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("mremap")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_mremap
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:unsigned long addr;	offset:16;	size:8;	signed:0;
	field:unsigned long old_len;	offset:24;	size:8;	signed:0;
	field:unsigned long new_len;	offset:32;	size:8;	signed:0;
	field:unsigned long flags;	offset:40;	size:8;	signed:0;
	field:unsigned long new_addr;	offset:48;	size:8;	signed:0;

print fmt: "addr: 0x%08lx, old_len: 0x%08lx, new_len: 0x%08lx, flags: 0x%08lx, new_addr: 0x%08lx", ((unsigned long)(REC->addr)), ((unsigned long)(REC->old_len)), ((unsigned long)(REC->new_len)), ((unsigned long)(REC->flags)), ((unsigned long)(REC->new_addr))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("mprotect")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_mprotect
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:unsigned long start;	offset:16;	size:8;	signed:0;
	field:size_t len;	offset:24;	size:8;	signed:0;
	field:unsigned long prot;	offset:32;	size:8;	signed:0;

print fmt: "start: 0x%08lx, len: 0x%08lx, prot: 0x%08lx", ((unsigned long)(REC->start)), ((unsigned long)(REC->len)), ((unsigned long)(REC->prot))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("pkey_mprotect")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_pkey_mprotect
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:unsigned long start;	offset:16;	size:8;	signed:0;
	field:size_t len;	offset:24;	size:8;	signed:0;
	field:unsigned long prot;	offset:32;	size:8;	signed:0;
	field:int pkey;	offset:40;	size:8;	signed:0;

print fmt: "start: 0x%08lx, len: 0x%08lx, prot: 0x%08lx, pkey: 0x%08lx", ((unsigned long)(REC->start)), ((unsigned long)(REC->len)), ((unsigned long)(REC->prot)), ((unsigned long)(REC->pkey))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("pkey_alloc")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_pkey_alloc
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:unsigned long flags;	offset:16;	size:8;	signed:0;
	field:unsigned long init_val;	offset:24;	size:8;	signed:0;

print fmt: "flags: 0x%08lx, init_val: 0x%08lx", ((unsigned long)(REC->flags)), ((unsigned long)(REC->init_val))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("pkey_free")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_pkey_free
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int pkey;	offset:16;	size:8;	signed:0;

print fmt: "pkey: 0x%08lx", ((unsigned long)(REC->pkey))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("brk")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_brk
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:unsigned long brk;	offset:16;	size:8;	signed:0;

print fmt: "brk: 0x%08lx", ((unsigned long)(REC->brk))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("munmap")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_munmap
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:unsigned long addr;	offset:16;	size:8;	signed:0;
	field:size_t len;	offset:24;	size:8;	signed:0;

print fmt: "addr: 0x%08lx, len: 0x%08lx", ((unsigned long)(REC->addr)), ((unsigned long)(REC->len))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("remap_file_pages")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_remap_file_pages
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:unsigned long start;	offset:16;	size:8;	signed:0;
	field:unsigned long size;	offset:24;	size:8;	signed:0;
	field:unsigned long prot;	offset:32;	size:8;	signed:0;
	field:unsigned long pgoff;	offset:40;	size:8;	signed:0;
	field:unsigned long flags;	offset:48;	size:8;	signed:0;

print fmt: "start: 0x%08lx, size: 0x%08lx, prot: 0x%08lx, pgoff: 0x%08lx, flags: 0x%08lx", ((unsigned long)(REC->start)), ((unsigned long)(REC->size)), ((unsigned long)(REC->prot)), ((unsigned long)(REC->pgoff)), ((unsigned long)(REC->flags))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("mlock")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_mlock
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:unsigned long start;	offset:16;	size:8;	signed:0;
	field:size_t len;	offset:24;	size:8;	signed:0;

print fmt: "start: 0x%08lx, len: 0x%08lx", ((unsigned long)(REC->start)), ((unsigned long)(REC->len))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("mlock2")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_mlock2
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:unsigned long start;	offset:16;	size:8;	signed:0;
	field:size_t len;	offset:24;	size:8;	signed:0;
	field:int flags;	offset:32;	size:8;	signed:0;

print fmt: "start: 0x%08lx, len: 0x%08lx, flags: 0x%08lx", ((unsigned long)(REC->start)), ((unsigned long)(REC->len)), ((unsigned long)(REC->flags))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("munlock")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_munlock
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:unsigned long start;	offset:16;	size:8;	signed:0;
	field:size_t len;	offset:24;	size:8;	signed:0;

print fmt: "start: 0x%08lx, len: 0x%08lx", ((unsigned long)(REC->start)), ((unsigned long)(REC->len))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("mlockall")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_mlockall
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int flags;	offset:16;	size:8;	signed:0;

print fmt: "flags: 0x%08lx", ((unsigned long)(REC->flags))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("munlockall")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_munlockall
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;

print fmt: ""
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("mincore")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_mincore
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:unsigned long start;	offset:16;	size:8;	signed:0;
	field:size_t len;	offset:24;	size:8;	signed:0;
	field:unsigned char * vec;	offset:32;	size:8;	signed:0;

print fmt: "start: 0x%08lx, len: 0x%08lx, vec: 0x%08lx", ((unsigned long)(REC->start)), ((unsigned long)(REC->len)), ((unsigned long)(REC->vec))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("readahead")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_readahead
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int fd;	offset:16;	size:8;	signed:0;
	field:loff_t offset;	offset:24;	size:8;	signed:0;
	field:size_t count;	offset:32;	size:8;	signed:0;

print fmt: "fd: 0x%08lx, offset: 0x%08lx, count: 0x%08lx", ((unsigned long)(REC->fd)), ((unsigned long)(REC->offset)), ((unsigned long)(REC->count))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("fadvise64")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_fadvise64
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int fd;	offset:16;	size:8;	signed:0;
	field:loff_t offset;	offset:24;	size:8;	signed:0;
	field:size_t len;	offset:32;	size:8;	signed:0;
	field:int advice;	offset:40;	size:8;	signed:0;

print fmt: "fd: 0x%08lx, offset: 0x%08lx, len: 0x%08lx, advice: 0x%08lx", ((unsigned long)(REC->fd)), ((unsigned long)(REC->offset)), ((unsigned long)(REC->len)), ((unsigned long)(REC->advice))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("rseq")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_rseq
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:struct rseq * rseq;	offset:16;	size:8;	signed:0;
	field:u32 rseq_len;	offset:24;	size:8;	signed:0;
	field:int flags;	offset:32;	size:8;	signed:0;
	field:u32 sig;	offset:40;	size:8;	signed:0;

print fmt: "rseq: 0x%08lx, rseq_len: 0x%08lx, flags: 0x%08lx, sig: 0x%08lx", ((unsigned long)(REC->rseq)), ((unsigned long)(REC->rseq_len)), ((unsigned long)(REC->flags)), ((unsigned long)(REC->sig))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("perf_event_open")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_perf_event_open
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:struct perf_event_attr * attr_uptr;	offset:16;	size:8;	signed:0;
	field:pid_t pid;	offset:24;	size:8;	signed:0;
	field:int cpu;	offset:32;	size:8;	signed:0;
	field:int group_fd;	offset:40;	size:8;	signed:0;
	field:unsigned long flags;	offset:48;	size:8;	signed:0;

print fmt: "attr_uptr: 0x%08lx, pid: 0x%08lx, cpu: 0x%08lx, group_fd: 0x%08lx, flags: 0x%08lx", ((unsigned long)(REC->attr_uptr)), ((unsigned long)(REC->pid)), ((unsigned long)(REC->cpu)), ((unsigned long)(REC->group_fd)), ((unsigned long)(REC->flags))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("bpf")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_bpf
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int cmd;	offset:16;	size:8;	signed:0;
	field:union bpf_attr * uattr;	offset:24;	size:8;	signed:0;
	field:unsigned int size;	offset:32;	size:8;	signed:0;

print fmt: "cmd: 0x%08lx, uattr: 0x%08lx, size: 0x%08lx", ((unsigned long)(REC->cmd)), ((unsigned long)(REC->uattr)), ((unsigned long)(REC->size))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("seccomp")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_seccomp
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:unsigned int op;	offset:16;	size:8;	signed:0;
	field:unsigned int flags;	offset:24;	size:8;	signed:0;
	field:void * uargs;	offset:32;	size:8;	signed:0;

print fmt: "op: 0x%08lx, flags: 0x%08lx, uargs: 0x%08lx", ((unsigned long)(REC->op)), ((unsigned long)(REC->flags)), ((unsigned long)(REC->uargs))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("kexec_file_load")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_kexec_file_load
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int kernel_fd;	offset:16;	size:8;	signed:0;
	field:int initrd_fd;	offset:24;	size:8;	signed:0;
	field:unsigned long cmdline_len;	offset:32;	size:8;	signed:0;
	field:const char * cmdline_ptr;	offset:40;	size:8;	signed:0;
	field:unsigned long flags;	offset:48;	size:8;	signed:0;

print fmt: "kernel_fd: 0x%08lx, initrd_fd: 0x%08lx, cmdline_len: 0x%08lx, cmdline_ptr: 0x%08lx, flags: 0x%08lx", ((unsigned long)(REC->kernel_fd)), ((unsigned long)(REC->initrd_fd)), ((unsigned long)(REC->cmdline_len)), ((unsigned long)(REC->cmdline_ptr)), ((unsigned long)(REC->flags))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("kexec_load")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_kexec_load
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:unsigned long entry;	offset:16;	size:8;	signed:0;
	field:unsigned long nr_segments;	offset:24;	size:8;	signed:0;
	field:struct kexec_segment * segments;	offset:32;	size:8;	signed:0;
	field:unsigned long flags;	offset:40;	size:8;	signed:0;

print fmt: "entry: 0x%08lx, nr_segments: 0x%08lx, segments: 0x%08lx, flags: 0x%08lx", ((unsigned long)(REC->entry)), ((unsigned long)(REC->nr_segments)), ((unsigned long)(REC->segments)), ((unsigned long)(REC->flags))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("acct")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_acct
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:const char * name;	offset:16;	size:8;	signed:0;

print fmt: "name: 0x%08lx", ((unsigned long)(REC->name))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("delete_module")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_delete_module
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:const char * name_user;	offset:16;	size:8;	signed:0;
	field:unsigned int flags;	offset:24;	size:8;	signed:0;

print fmt: "name_user: 0x%08lx, flags: 0x%08lx", ((unsigned long)(REC->name_user)), ((unsigned long)(REC->flags))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("init_module")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_init_module
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:void * umod;	offset:16;	size:8;	signed:0;
	field:unsigned long len;	offset:24;	size:8;	signed:0;
	field:const char * uargs;	offset:32;	size:8;	signed:0;

print fmt: "umod: 0x%08lx, len: 0x%08lx, uargs: 0x%08lx", ((unsigned long)(REC->umod)), ((unsigned long)(REC->len)), ((unsigned long)(REC->uargs))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("finit_module")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_finit_module
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int fd;	offset:16;	size:8;	signed:0;
	field:const char * uargs;	offset:24;	size:8;	signed:0;
	field:int flags;	offset:32;	size:8;	signed:0;

print fmt: "fd: 0x%08lx, uargs: 0x%08lx, flags: 0x%08lx", ((unsigned long)(REC->fd)), ((unsigned long)(REC->uargs)), ((unsigned long)(REC->flags))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("set_robust_list")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_set_robust_list
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:struct robust_list_head * head;	offset:16;	size:8;	signed:0;
	field:size_t len;	offset:24;	size:8;	signed:0;

print fmt: "head: 0x%08lx, len: 0x%08lx", ((unsigned long)(REC->head)), ((unsigned long)(REC->len))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("get_robust_list")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_get_robust_list
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int pid;	offset:16;	size:8;	signed:0;
	field:struct robust_list_head * * head_ptr;	offset:24;	size:8;	signed:0;
	field:size_t * len_ptr;	offset:32;	size:8;	signed:0;

print fmt: "pid: 0x%08lx, head_ptr: 0x%08lx, len_ptr: 0x%08lx", ((unsigned long)(REC->pid)), ((unsigned long)(REC->head_ptr)), ((unsigned long)(REC->len_ptr))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("futex")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_futex
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:u32 * uaddr;	offset:16;	size:8;	signed:0;
	field:int op;	offset:24;	size:8;	signed:0;
	field:u32 val;	offset:32;	size:8;	signed:0;
	field:struct __kernel_timespec * utime;	offset:40;	size:8;	signed:0;
	field:u32 * uaddr2;	offset:48;	size:8;	signed:0;
	field:u32 val3;	offset:56;	size:8;	signed:0;

print fmt: "uaddr: 0x%08lx, op: 0x%08lx, val: 0x%08lx, utime: 0x%08lx, uaddr2: 0x%08lx, val3: 0x%08lx", ((unsigned long)(REC->uaddr)), ((unsigned long)(REC->op)), ((unsigned long)(REC->val)), ((unsigned long)(REC->utime)), ((unsigned long)(REC->uaddr2)), ((unsigned long)(REC->val3))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("getitimer")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_getitimer
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int which;	offset:16;	size:8;	signed:0;
	field:struct __kernel_old_itimerval * value;	offset:24;	size:8;	signed:0;

print fmt: "which: 0x%08lx, value: 0x%08lx", ((unsigned long)(REC->which)), ((unsigned long)(REC->value))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("alarm")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_alarm
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:unsigned int seconds;	offset:16;	size:8;	signed:0;

print fmt: "seconds: 0x%08lx", ((unsigned long)(REC->seconds))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("setitimer")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_setitimer
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int which;	offset:16;	size:8;	signed:0;
	field:struct __kernel_old_itimerval * value;	offset:24;	size:8;	signed:0;
	field:struct __kernel_old_itimerval * ovalue;	offset:32;	size:8;	signed:0;

print fmt: "which: 0x%08lx, value: 0x%08lx, ovalue: 0x%08lx", ((unsigned long)(REC->which)), ((unsigned long)(REC->value)), ((unsigned long)(REC->ovalue))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("timer_create")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_timer_create
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:const clockid_t which_clock;	offset:16;	size:8;	signed:0;
	field:struct sigevent * timer_event_spec;	offset:24;	size:8;	signed:0;
	field:timer_t * created_timer_id;	offset:32;	size:8;	signed:0;

print fmt: "which_clock: 0x%08lx, timer_event_spec: 0x%08lx, created_timer_id: 0x%08lx", ((unsigned long)(REC->which_clock)), ((unsigned long)(REC->timer_event_spec)), ((unsigned long)(REC->created_timer_id))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("timer_gettime")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_timer_gettime
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:timer_t timer_id;	offset:16;	size:8;	signed:0;
	field:struct __kernel_itimerspec * setting;	offset:24;	size:8;	signed:0;

print fmt: "timer_id: 0x%08lx, setting: 0x%08lx", ((unsigned long)(REC->timer_id)), ((unsigned long)(REC->setting))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("timer_getoverrun")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_timer_getoverrun
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:timer_t timer_id;	offset:16;	size:8;	signed:0;

print fmt: "timer_id: 0x%08lx", ((unsigned long)(REC->timer_id))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("timer_settime")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_timer_settime
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:timer_t timer_id;	offset:16;	size:8;	signed:0;
	field:int flags;	offset:24;	size:8;	signed:0;
	field:const struct __kernel_itimerspec * new_setting;	offset:32;	size:8;	signed:0;
	field:struct __kernel_itimerspec * old_setting;	offset:40;	size:8;	signed:0;

print fmt: "timer_id: 0x%08lx, flags: 0x%08lx, new_setting: 0x%08lx, old_setting: 0x%08lx", ((unsigned long)(REC->timer_id)), ((unsigned long)(REC->flags)), ((unsigned long)(REC->new_setting)), ((unsigned long)(REC->old_setting))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("timer_delete")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_timer_delete
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:timer_t timer_id;	offset:16;	size:8;	signed:0;

print fmt: "timer_id: 0x%08lx", ((unsigned long)(REC->timer_id))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("clock_settime")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_clock_settime
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:const clockid_t which_clock;	offset:16;	size:8;	signed:0;
	field:const struct __kernel_timespec * tp;	offset:24;	size:8;	signed:0;

print fmt: "which_clock: 0x%08lx, tp: 0x%08lx", ((unsigned long)(REC->which_clock)), ((unsigned long)(REC->tp))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("clock_gettime")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_clock_gettime
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:const clockid_t which_clock;	offset:16;	size:8;	signed:0;
	field:struct __kernel_timespec * tp;	offset:24;	size:8;	signed:0;

print fmt: "which_clock: 0x%08lx, tp: 0x%08lx", ((unsigned long)(REC->which_clock)), ((unsigned long)(REC->tp))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("clock_adjtime")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_clock_adjtime
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:const clockid_t which_clock;	offset:16;	size:8;	signed:0;
	field:struct __kernel_timex * utx;	offset:24;	size:8;	signed:0;

print fmt: "which_clock: 0x%08lx, utx: 0x%08lx", ((unsigned long)(REC->which_clock)), ((unsigned long)(REC->utx))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("clock_getres")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_clock_getres
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:const clockid_t which_clock;	offset:16;	size:8;	signed:0;
	field:struct __kernel_timespec * tp;	offset:24;	size:8;	signed:0;

print fmt: "which_clock: 0x%08lx, tp: 0x%08lx", ((unsigned long)(REC->which_clock)), ((unsigned long)(REC->tp))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("clock_nanosleep")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_clock_nanosleep
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:const clockid_t which_clock;	offset:16;	size:8;	signed:0;
	field:int flags;	offset:24;	size:8;	signed:0;
	field:const struct __kernel_timespec * rqtp;	offset:32;	size:8;	signed:0;
	field:struct __kernel_timespec * rmtp;	offset:40;	size:8;	signed:0;

print fmt: "which_clock: 0x%08lx, flags: 0x%08lx, rqtp: 0x%08lx, rmtp: 0x%08lx", ((unsigned long)(REC->which_clock)), ((unsigned long)(REC->flags)), ((unsigned long)(REC->rqtp)), ((unsigned long)(REC->rmtp))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("nanosleep")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_nanosleep
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:struct __kernel_timespec * rqtp;	offset:16;	size:8;	signed:0;
	field:struct __kernel_timespec * rmtp;	offset:24;	size:8;	signed:0;

print fmt: "rqtp: 0x%08lx, rmtp: 0x%08lx", ((unsigned long)(REC->rqtp)), ((unsigned long)(REC->rmtp))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("time")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_time
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:__kernel_old_time_t * tloc;	offset:16;	size:8;	signed:0;

print fmt: "tloc: 0x%08lx", ((unsigned long)(REC->tloc))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("gettimeofday")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_gettimeofday
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:struct __kernel_old_timeval * tv;	offset:16;	size:8;	signed:0;
	field:struct timezone * tz;	offset:24;	size:8;	signed:0;

print fmt: "tv: 0x%08lx, tz: 0x%08lx", ((unsigned long)(REC->tv)), ((unsigned long)(REC->tz))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("settimeofday")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_settimeofday
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:struct __kernel_old_timeval * tv;	offset:16;	size:8;	signed:0;
	field:struct timezone * tz;	offset:24;	size:8;	signed:0;

print fmt: "tv: 0x%08lx, tz: 0x%08lx", ((unsigned long)(REC->tv)), ((unsigned long)(REC->tz))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("adjtimex")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_adjtimex
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:struct __kernel_timex * txc_p;	offset:16;	size:8;	signed:0;

print fmt: "txc_p: 0x%08lx", ((unsigned long)(REC->txc_p))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("kcmp")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_kcmp
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:pid_t pid1;	offset:16;	size:8;	signed:0;
	field:pid_t pid2;	offset:24;	size:8;	signed:0;
	field:int type;	offset:32;	size:8;	signed:0;
	field:unsigned long idx1;	offset:40;	size:8;	signed:0;
	field:unsigned long idx2;	offset:48;	size:8;	signed:0;

print fmt: "pid1: 0x%08lx, pid2: 0x%08lx, type: 0x%08lx, idx1: 0x%08lx, idx2: 0x%08lx", ((unsigned long)(REC->pid1)), ((unsigned long)(REC->pid2)), ((unsigned long)(REC->type)), ((unsigned long)(REC->idx1)), ((unsigned long)(REC->idx2))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("syslog")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_syslog
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int type;	offset:16;	size:8;	signed:0;
	field:char * buf;	offset:24;	size:8;	signed:0;
	field:int len;	offset:32;	size:8;	signed:0;

print fmt: "type: 0x%08lx, buf: 0x%08lx, len: 0x%08lx", ((unsigned long)(REC->type)), ((unsigned long)(REC->buf)), ((unsigned long)(REC->len))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("membarrier")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_membarrier
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int cmd;	offset:16;	size:8;	signed:0;
	field:int flags;	offset:24;	size:8;	signed:0;

print fmt: "cmd: 0x%08lx, flags: 0x%08lx", ((unsigned long)(REC->cmd)), ((unsigned long)(REC->flags))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("sched_setscheduler")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_sched_setscheduler
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:pid_t pid;	offset:16;	size:8;	signed:0;
	field:int policy;	offset:24;	size:8;	signed:0;
	field:struct sched_param * param;	offset:32;	size:8;	signed:0;

print fmt: "pid: 0x%08lx, policy: 0x%08lx, param: 0x%08lx", ((unsigned long)(REC->pid)), ((unsigned long)(REC->policy)), ((unsigned long)(REC->param))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("sched_setparam")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_sched_setparam
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:pid_t pid;	offset:16;	size:8;	signed:0;
	field:struct sched_param * param;	offset:24;	size:8;	signed:0;

print fmt: "pid: 0x%08lx, param: 0x%08lx", ((unsigned long)(REC->pid)), ((unsigned long)(REC->param))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("sched_setattr")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_sched_setattr
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:pid_t pid;	offset:16;	size:8;	signed:0;
	field:struct sched_attr * uattr;	offset:24;	size:8;	signed:0;
	field:unsigned int flags;	offset:32;	size:8;	signed:0;

print fmt: "pid: 0x%08lx, uattr: 0x%08lx, flags: 0x%08lx", ((unsigned long)(REC->pid)), ((unsigned long)(REC->uattr)), ((unsigned long)(REC->flags))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("sched_getscheduler")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_sched_getscheduler
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:pid_t pid;	offset:16;	size:8;	signed:0;

print fmt: "pid: 0x%08lx", ((unsigned long)(REC->pid))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("sched_getparam")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_sched_getparam
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:pid_t pid;	offset:16;	size:8;	signed:0;
	field:struct sched_param * param;	offset:24;	size:8;	signed:0;

print fmt: "pid: 0x%08lx, param: 0x%08lx", ((unsigned long)(REC->pid)), ((unsigned long)(REC->param))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("sched_getattr")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_sched_getattr
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:pid_t pid;	offset:16;	size:8;	signed:0;
	field:struct sched_attr * uattr;	offset:24;	size:8;	signed:0;
	field:unsigned int usize;	offset:32;	size:8;	signed:0;
	field:unsigned int flags;	offset:40;	size:8;	signed:0;

print fmt: "pid: 0x%08lx, uattr: 0x%08lx, usize: 0x%08lx, flags: 0x%08lx", ((unsigned long)(REC->pid)), ((unsigned long)(REC->uattr)), ((unsigned long)(REC->usize)), ((unsigned long)(REC->flags))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("sched_setaffinity")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_sched_setaffinity
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:pid_t pid;	offset:16;	size:8;	signed:0;
	field:unsigned int len;	offset:24;	size:8;	signed:0;
	field:unsigned long * user_mask_ptr;	offset:32;	size:8;	signed:0;

print fmt: "pid: 0x%08lx, len: 0x%08lx, user_mask_ptr: 0x%08lx", ((unsigned long)(REC->pid)), ((unsigned long)(REC->len)), ((unsigned long)(REC->user_mask_ptr))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("sched_getaffinity")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_sched_getaffinity
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:pid_t pid;	offset:16;	size:8;	signed:0;
	field:unsigned int len;	offset:24;	size:8;	signed:0;
	field:unsigned long * user_mask_ptr;	offset:32;	size:8;	signed:0;

print fmt: "pid: 0x%08lx, len: 0x%08lx, user_mask_ptr: 0x%08lx", ((unsigned long)(REC->pid)), ((unsigned long)(REC->len)), ((unsigned long)(REC->user_mask_ptr))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("sched_yield")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_sched_yield
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;

print fmt: ""
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("sched_get_priority_max")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_sched_get_priority_max
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int policy;	offset:16;	size:8;	signed:0;

print fmt: "policy: 0x%08lx", ((unsigned long)(REC->policy))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("sched_get_priority_min")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_sched_get_priority_min
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int policy;	offset:16;	size:8;	signed:0;

print fmt: "policy: 0x%08lx", ((unsigned long)(REC->policy))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("sched_rr_get_interval")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_sched_rr_get_interval
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:pid_t pid;	offset:16;	size:8;	signed:0;
	field:struct __kernel_timespec * interval;	offset:24;	size:8;	signed:0;

print fmt: "pid: 0x%08lx, interval: 0x%08lx", ((unsigned long)(REC->pid)), ((unsigned long)(REC->interval))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("getgroups")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_getgroups
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int gidsetsize;	offset:16;	size:8;	signed:0;
	field:gid_t * grouplist;	offset:24;	size:8;	signed:0;

print fmt: "gidsetsize: 0x%08lx, grouplist: 0x%08lx", ((unsigned long)(REC->gidsetsize)), ((unsigned long)(REC->grouplist))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("setgroups")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_setgroups
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int gidsetsize;	offset:16;	size:8;	signed:0;
	field:gid_t * grouplist;	offset:24;	size:8;	signed:0;

print fmt: "gidsetsize: 0x%08lx, grouplist: 0x%08lx", ((unsigned long)(REC->gidsetsize)), ((unsigned long)(REC->grouplist))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("reboot")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_reboot
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int magic1;	offset:16;	size:8;	signed:0;
	field:int magic2;	offset:24;	size:8;	signed:0;
	field:unsigned int cmd;	offset:32;	size:8;	signed:0;
	field:void * arg;	offset:40;	size:8;	signed:0;

print fmt: "magic1: 0x%08lx, magic2: 0x%08lx, cmd: 0x%08lx, arg: 0x%08lx", ((unsigned long)(REC->magic1)), ((unsigned long)(REC->magic2)), ((unsigned long)(REC->cmd)), ((unsigned long)(REC->arg))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("setns")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_setns
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int fd;	offset:16;	size:8;	signed:0;
	field:int nstype;	offset:24;	size:8;	signed:0;

print fmt: "fd: 0x%08lx, nstype: 0x%08lx", ((unsigned long)(REC->fd)), ((unsigned long)(REC->nstype))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("pidfd_open")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_pidfd_open
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:pid_t pid;	offset:16;	size:8;	signed:0;
	field:unsigned int flags;	offset:24;	size:8;	signed:0;

print fmt: "pid: 0x%08lx, flags: 0x%08lx", ((unsigned long)(REC->pid)), ((unsigned long)(REC->flags))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("pidfd_getfd")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_pidfd_getfd
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int pidfd;	offset:16;	size:8;	signed:0;
	field:int fd;	offset:24;	size:8;	signed:0;
	field:unsigned int flags;	offset:32;	size:8;	signed:0;

print fmt: "pidfd: 0x%08lx, fd: 0x%08lx, flags: 0x%08lx", ((unsigned long)(REC->pidfd)), ((unsigned long)(REC->fd)), ((unsigned long)(REC->flags))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("setpriority")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_setpriority
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int which;	offset:16;	size:8;	signed:0;
	field:int who;	offset:24;	size:8;	signed:0;
	field:int niceval;	offset:32;	size:8;	signed:0;

print fmt: "which: 0x%08lx, who: 0x%08lx, niceval: 0x%08lx", ((unsigned long)(REC->which)), ((unsigned long)(REC->who)), ((unsigned long)(REC->niceval))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("getpriority")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_getpriority
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int which;	offset:16;	size:8;	signed:0;
	field:int who;	offset:24;	size:8;	signed:0;

print fmt: "which: 0x%08lx, who: 0x%08lx", ((unsigned long)(REC->which)), ((unsigned long)(REC->who))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("setregid")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_setregid
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:gid_t rgid;	offset:16;	size:8;	signed:0;
	field:gid_t egid;	offset:24;	size:8;	signed:0;

print fmt: "rgid: 0x%08lx, egid: 0x%08lx", ((unsigned long)(REC->rgid)), ((unsigned long)(REC->egid))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("setgid")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_setgid
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:gid_t gid;	offset:16;	size:8;	signed:0;

print fmt: "gid: 0x%08lx", ((unsigned long)(REC->gid))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("setreuid")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_setreuid
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:uid_t ruid;	offset:16;	size:8;	signed:0;
	field:uid_t euid;	offset:24;	size:8;	signed:0;

print fmt: "ruid: 0x%08lx, euid: 0x%08lx", ((unsigned long)(REC->ruid)), ((unsigned long)(REC->euid))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("setuid")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_setuid
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:uid_t uid;	offset:16;	size:8;	signed:0;

print fmt: "uid: 0x%08lx", ((unsigned long)(REC->uid))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("setresuid")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_setresuid
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:uid_t ruid;	offset:16;	size:8;	signed:0;
	field:uid_t euid;	offset:24;	size:8;	signed:0;
	field:uid_t suid;	offset:32;	size:8;	signed:0;

print fmt: "ruid: 0x%08lx, euid: 0x%08lx, suid: 0x%08lx", ((unsigned long)(REC->ruid)), ((unsigned long)(REC->euid)), ((unsigned long)(REC->suid))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("getresuid")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_getresuid
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:uid_t * ruidp;	offset:16;	size:8;	signed:0;
	field:uid_t * euidp;	offset:24;	size:8;	signed:0;
	field:uid_t * suidp;	offset:32;	size:8;	signed:0;

print fmt: "ruidp: 0x%08lx, euidp: 0x%08lx, suidp: 0x%08lx", ((unsigned long)(REC->ruidp)), ((unsigned long)(REC->euidp)), ((unsigned long)(REC->suidp))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("setresgid")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_setresgid
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:gid_t rgid;	offset:16;	size:8;	signed:0;
	field:gid_t egid;	offset:24;	size:8;	signed:0;
	field:gid_t sgid;	offset:32;	size:8;	signed:0;

print fmt: "rgid: 0x%08lx, egid: 0x%08lx, sgid: 0x%08lx", ((unsigned long)(REC->rgid)), ((unsigned long)(REC->egid)), ((unsigned long)(REC->sgid))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("getresgid")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_getresgid
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:gid_t * rgidp;	offset:16;	size:8;	signed:0;
	field:gid_t * egidp;	offset:24;	size:8;	signed:0;
	field:gid_t * sgidp;	offset:32;	size:8;	signed:0;

print fmt: "rgidp: 0x%08lx, egidp: 0x%08lx, sgidp: 0x%08lx", ((unsigned long)(REC->rgidp)), ((unsigned long)(REC->egidp)), ((unsigned long)(REC->sgidp))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("setfsuid")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_setfsuid
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:uid_t uid;	offset:16;	size:8;	signed:0;

print fmt: "uid: 0x%08lx", ((unsigned long)(REC->uid))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("setfsgid")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_setfsgid
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:gid_t gid;	offset:16;	size:8;	signed:0;

print fmt: "gid: 0x%08lx", ((unsigned long)(REC->gid))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("getpid")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_getpid
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;

print fmt: ""
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("gettid")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_gettid
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;

print fmt: ""
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("getppid")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_getppid
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;

print fmt: ""
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("getuid")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_getuid
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;

print fmt: ""
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("geteuid")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_geteuid
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;

print fmt: ""
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("getgid")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_getgid
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;

print fmt: ""
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("getegid")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_getegid
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;

print fmt: ""
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("times")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_times
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:struct tms * tbuf;	offset:16;	size:8;	signed:0;

print fmt: "tbuf: 0x%08lx", ((unsigned long)(REC->tbuf))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("setpgid")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_setpgid
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:pid_t pid;	offset:16;	size:8;	signed:0;
	field:pid_t pgid;	offset:24;	size:8;	signed:0;

print fmt: "pid: 0x%08lx, pgid: 0x%08lx", ((unsigned long)(REC->pid)), ((unsigned long)(REC->pgid))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("getpgid")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_getpgid
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:pid_t pid;	offset:16;	size:8;	signed:0;

print fmt: "pid: 0x%08lx", ((unsigned long)(REC->pid))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("getpgrp")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_getpgrp
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;

print fmt: ""
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("getsid")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_getsid
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:pid_t pid;	offset:16;	size:8;	signed:0;

print fmt: "pid: 0x%08lx", ((unsigned long)(REC->pid))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("setsid")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_setsid
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;

print fmt: ""
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("newuname")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_newuname
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:struct new_utsname * name;	offset:16;	size:8;	signed:0;

print fmt: "name: 0x%08lx", ((unsigned long)(REC->name))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("sethostname")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_sethostname
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:char * name;	offset:16;	size:8;	signed:0;
	field:int len;	offset:24;	size:8;	signed:0;

print fmt: "name: 0x%08lx, len: 0x%08lx", ((unsigned long)(REC->name)), ((unsigned long)(REC->len))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("setdomainname")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_setdomainname
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:char * name;	offset:16;	size:8;	signed:0;
	field:int len;	offset:24;	size:8;	signed:0;

print fmt: "name: 0x%08lx, len: 0x%08lx", ((unsigned long)(REC->name)), ((unsigned long)(REC->len))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("getrlimit")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_getrlimit
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:unsigned int resource;	offset:16;	size:8;	signed:0;
	field:struct rlimit * rlim;	offset:24;	size:8;	signed:0;

print fmt: "resource: 0x%08lx, rlim: 0x%08lx", ((unsigned long)(REC->resource)), ((unsigned long)(REC->rlim))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("prlimit64")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_prlimit64
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:pid_t pid;	offset:16;	size:8;	signed:0;
	field:unsigned int resource;	offset:24;	size:8;	signed:0;
	field:const struct rlimit64 * new_rlim;	offset:32;	size:8;	signed:0;
	field:struct rlimit64 * old_rlim;	offset:40;	size:8;	signed:0;

print fmt: "pid: 0x%08lx, resource: 0x%08lx, new_rlim: 0x%08lx, old_rlim: 0x%08lx", ((unsigned long)(REC->pid)), ((unsigned long)(REC->resource)), ((unsigned long)(REC->new_rlim)), ((unsigned long)(REC->old_rlim))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("setrlimit")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_setrlimit
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:unsigned int resource;	offset:16;	size:8;	signed:0;
	field:struct rlimit * rlim;	offset:24;	size:8;	signed:0;

print fmt: "resource: 0x%08lx, rlim: 0x%08lx", ((unsigned long)(REC->resource)), ((unsigned long)(REC->rlim))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("getrusage")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_getrusage
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int who;	offset:16;	size:8;	signed:0;
	field:struct rusage * ru;	offset:24;	size:8;	signed:0;

print fmt: "who: 0x%08lx, ru: 0x%08lx", ((unsigned long)(REC->who)), ((unsigned long)(REC->ru))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("umask")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_umask
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int mask;	offset:16;	size:8;	signed:0;

print fmt: "mask: 0x%08lx", ((unsigned long)(REC->mask))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("prctl")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_prctl
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int option;	offset:16;	size:8;	signed:0;
	field:unsigned long arg2;	offset:24;	size:8;	signed:0;
	field:unsigned long arg3;	offset:32;	size:8;	signed:0;
	field:unsigned long arg4;	offset:40;	size:8;	signed:0;
	field:unsigned long arg5;	offset:48;	size:8;	signed:0;

print fmt: "option: 0x%08lx, arg2: 0x%08lx, arg3: 0x%08lx, arg4: 0x%08lx, arg5: 0x%08lx", ((unsigned long)(REC->option)), ((unsigned long)(REC->arg2)), ((unsigned long)(REC->arg3)), ((unsigned long)(REC->arg4)), ((unsigned long)(REC->arg5))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("getcpu")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_getcpu
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:unsigned * cpup;	offset:16;	size:8;	signed:0;
	field:unsigned * nodep;	offset:24;	size:8;	signed:0;
	field:struct getcpu_cache * unused;	offset:32;	size:8;	signed:0;

print fmt: "cpup: 0x%08lx, nodep: 0x%08lx, unused: 0x%08lx", ((unsigned long)(REC->cpup)), ((unsigned long)(REC->nodep)), ((unsigned long)(REC->unused))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("sysinfo")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_sysinfo
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:struct sysinfo * info;	offset:16;	size:8;	signed:0;

print fmt: "info: 0x%08lx", ((unsigned long)(REC->info))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("restart_syscall")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_restart_syscall
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;

print fmt: ""
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("rt_sigprocmask")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_rt_sigprocmask
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int how;	offset:16;	size:8;	signed:0;
	field:sigset_t * nset;	offset:24;	size:8;	signed:0;
	field:sigset_t * oset;	offset:32;	size:8;	signed:0;
	field:size_t sigsetsize;	offset:40;	size:8;	signed:0;

print fmt: "how: 0x%08lx, nset: 0x%08lx, oset: 0x%08lx, sigsetsize: 0x%08lx", ((unsigned long)(REC->how)), ((unsigned long)(REC->nset)), ((unsigned long)(REC->oset)), ((unsigned long)(REC->sigsetsize))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("rt_sigpending")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_rt_sigpending
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:sigset_t * uset;	offset:16;	size:8;	signed:0;
	field:size_t sigsetsize;	offset:24;	size:8;	signed:0;

print fmt: "uset: 0x%08lx, sigsetsize: 0x%08lx", ((unsigned long)(REC->uset)), ((unsigned long)(REC->sigsetsize))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("rt_sigtimedwait")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_rt_sigtimedwait
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:const sigset_t * uthese;	offset:16;	size:8;	signed:0;
	field:siginfo_t * uinfo;	offset:24;	size:8;	signed:0;
	field:const struct __kernel_timespec * uts;	offset:32;	size:8;	signed:0;
	field:size_t sigsetsize;	offset:40;	size:8;	signed:0;

print fmt: "uthese: 0x%08lx, uinfo: 0x%08lx, uts: 0x%08lx, sigsetsize: 0x%08lx", ((unsigned long)(REC->uthese)), ((unsigned long)(REC->uinfo)), ((unsigned long)(REC->uts)), ((unsigned long)(REC->sigsetsize))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("kill")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_kill
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:pid_t pid;	offset:16;	size:8;	signed:0;
	field:int sig;	offset:24;	size:8;	signed:0;

print fmt: "pid: 0x%08lx, sig: 0x%08lx", ((unsigned long)(REC->pid)), ((unsigned long)(REC->sig))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("pidfd_send_signal")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_pidfd_send_signal
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int pidfd;	offset:16;	size:8;	signed:0;
	field:int sig;	offset:24;	size:8;	signed:0;
	field:siginfo_t * info;	offset:32;	size:8;	signed:0;
	field:unsigned int flags;	offset:40;	size:8;	signed:0;

print fmt: "pidfd: 0x%08lx, sig: 0x%08lx, info: 0x%08lx, flags: 0x%08lx", ((unsigned long)(REC->pidfd)), ((unsigned long)(REC->sig)), ((unsigned long)(REC->info)), ((unsigned long)(REC->flags))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("tgkill")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_tgkill
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:pid_t tgid;	offset:16;	size:8;	signed:0;
	field:pid_t pid;	offset:24;	size:8;	signed:0;
	field:int sig;	offset:32;	size:8;	signed:0;

print fmt: "tgid: 0x%08lx, pid: 0x%08lx, sig: 0x%08lx", ((unsigned long)(REC->tgid)), ((unsigned long)(REC->pid)), ((unsigned long)(REC->sig))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("tkill")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_tkill
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:pid_t pid;	offset:16;	size:8;	signed:0;
	field:int sig;	offset:24;	size:8;	signed:0;

print fmt: "pid: 0x%08lx, sig: 0x%08lx", ((unsigned long)(REC->pid)), ((unsigned long)(REC->sig))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("rt_sigqueueinfo")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_rt_sigqueueinfo
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:pid_t pid;	offset:16;	size:8;	signed:0;
	field:int sig;	offset:24;	size:8;	signed:0;
	field:siginfo_t * uinfo;	offset:32;	size:8;	signed:0;

print fmt: "pid: 0x%08lx, sig: 0x%08lx, uinfo: 0x%08lx", ((unsigned long)(REC->pid)), ((unsigned long)(REC->sig)), ((unsigned long)(REC->uinfo))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("rt_tgsigqueueinfo")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_rt_tgsigqueueinfo
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:pid_t tgid;	offset:16;	size:8;	signed:0;
	field:pid_t pid;	offset:24;	size:8;	signed:0;
	field:int sig;	offset:32;	size:8;	signed:0;
	field:siginfo_t * uinfo;	offset:40;	size:8;	signed:0;

print fmt: "tgid: 0x%08lx, pid: 0x%08lx, sig: 0x%08lx, uinfo: 0x%08lx", ((unsigned long)(REC->tgid)), ((unsigned long)(REC->pid)), ((unsigned long)(REC->sig)), ((unsigned long)(REC->uinfo))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("sigaltstack")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_sigaltstack
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:const stack_t * uss;	offset:16;	size:8;	signed:0;
	field:stack_t * uoss;	offset:24;	size:8;	signed:0;

print fmt: "uss: 0x%08lx, uoss: 0x%08lx", ((unsigned long)(REC->uss)), ((unsigned long)(REC->uoss))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("rt_sigaction")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_rt_sigaction
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int sig;	offset:16;	size:8;	signed:0;
	field:const struct sigaction * act;	offset:24;	size:8;	signed:0;
	field:struct sigaction * oact;	offset:32;	size:8;	signed:0;
	field:size_t sigsetsize;	offset:40;	size:8;	signed:0;

print fmt: "sig: 0x%08lx, act: 0x%08lx, oact: 0x%08lx, sigsetsize: 0x%08lx", ((unsigned long)(REC->sig)), ((unsigned long)(REC->act)), ((unsigned long)(REC->oact)), ((unsigned long)(REC->sigsetsize))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("pause")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_pause
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;

print fmt: ""
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("rt_sigsuspend")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_rt_sigsuspend
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:sigset_t * unewset;	offset:16;	size:8;	signed:0;
	field:size_t sigsetsize;	offset:24;	size:8;	signed:0;

print fmt: "unewset: 0x%08lx, sigsetsize: 0x%08lx", ((unsigned long)(REC->unewset)), ((unsigned long)(REC->sigsetsize))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("ptrace")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_ptrace
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:long request;	offset:16;	size:8;	signed:0;
	field:long pid;	offset:24;	size:8;	signed:0;
	field:unsigned long addr;	offset:32;	size:8;	signed:0;
	field:unsigned long data;	offset:40;	size:8;	signed:0;

print fmt: "request: 0x%08lx, pid: 0x%08lx, addr: 0x%08lx, data: 0x%08lx", ((unsigned long)(REC->request)), ((unsigned long)(REC->pid)), ((unsigned long)(REC->addr)), ((unsigned long)(REC->data))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("capget")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_capget
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:cap_user_header_t header;	offset:16;	size:8;	signed:0;
	field:cap_user_data_t dataptr;	offset:24;	size:8;	signed:0;

print fmt: "header: 0x%08lx, dataptr: 0x%08lx", ((unsigned long)(REC->header)), ((unsigned long)(REC->dataptr))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("capset")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_capset
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:cap_user_header_t header;	offset:16;	size:8;	signed:0;
	field:const cap_user_data_t data;	offset:24;	size:8;	signed:0;

print fmt: "header: 0x%08lx, data: 0x%08lx", ((unsigned long)(REC->header)), ((unsigned long)(REC->data))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("sysctl")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_sysctl
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:struct __sysctl_args * args;	offset:16;	size:8;	signed:0;

print fmt: "args: 0x%08lx", ((unsigned long)(REC->args))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("exit")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_exit
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int error_code;	offset:16;	size:8;	signed:0;

print fmt: "error_code: 0x%08lx", ((unsigned long)(REC->error_code))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("exit_group")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_exit_group
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int error_code;	offset:16;	size:8;	signed:0;

print fmt: "error_code: 0x%08lx", ((unsigned long)(REC->error_code))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("waitid")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_waitid
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int which;	offset:16;	size:8;	signed:0;
	field:pid_t upid;	offset:24;	size:8;	signed:0;
	field:struct siginfo * infop;	offset:32;	size:8;	signed:0;
	field:int options;	offset:40;	size:8;	signed:0;
	field:struct rusage * ru;	offset:48;	size:8;	signed:0;

print fmt: "which: 0x%08lx, upid: 0x%08lx, infop: 0x%08lx, options: 0x%08lx, ru: 0x%08lx", ((unsigned long)(REC->which)), ((unsigned long)(REC->upid)), ((unsigned long)(REC->infop)), ((unsigned long)(REC->options)), ((unsigned long)(REC->ru))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("wait4")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_wait4
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:pid_t upid;	offset:16;	size:8;	signed:0;
	field:int * stat_addr;	offset:24;	size:8;	signed:0;
	field:int options;	offset:32;	size:8;	signed:0;
	field:struct rusage * ru;	offset:40;	size:8;	signed:0;

print fmt: "upid: 0x%08lx, stat_addr: 0x%08lx, options: 0x%08lx, ru: 0x%08lx", ((unsigned long)(REC->upid)), ((unsigned long)(REC->stat_addr)), ((unsigned long)(REC->options)), ((unsigned long)(REC->ru))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("personality")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_personality
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:unsigned int personality;	offset:16;	size:8;	signed:0;

print fmt: "personality: 0x%08lx", ((unsigned long)(REC->personality))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("set_tid_address")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_set_tid_address
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int * tidptr;	offset:16;	size:8;	signed:0;

print fmt: "tidptr: 0x%08lx", ((unsigned long)(REC->tidptr))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("fork")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_fork
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;

print fmt: ""
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("vfork")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_vfork
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;

print fmt: ""
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("clone")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_clone
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:unsigned long clone_flags;	offset:16;	size:8;	signed:0;
	field:unsigned long newsp;	offset:24;	size:8;	signed:0;
	field:int * parent_tidptr;	offset:32;	size:8;	signed:0;
	field:int * child_tidptr;	offset:40;	size:8;	signed:0;
	field:unsigned long tls;	offset:48;	size:8;	signed:0;

print fmt: "clone_flags: 0x%08lx, newsp: 0x%08lx, parent_tidptr: 0x%08lx, child_tidptr: 0x%08lx, tls: 0x%08lx", ((unsigned long)(REC->clone_flags)), ((unsigned long)(REC->newsp)), ((unsigned long)(REC->parent_tidptr)), ((unsigned long)(REC->child_tidptr)), ((unsigned long)(REC->tls))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("clone3")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_clone3
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:struct clone_args * uargs;	offset:16;	size:8;	signed:0;
	field:size_t size;	offset:24;	size:8;	signed:0;

print fmt: "uargs: 0x%08lx, size: 0x%08lx", ((unsigned long)(REC->uargs)), ((unsigned long)(REC->size))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("unshare")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_unshare
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:unsigned long unshare_flags;	offset:16;	size:8;	signed:0;

print fmt: "unshare_flags: 0x%08lx", ((unsigned long)(REC->unshare_flags))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("mmap")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_mmap
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:unsigned long addr;	offset:16;	size:8;	signed:0;
	field:unsigned long len;	offset:24;	size:8;	signed:0;
	field:unsigned long prot;	offset:32;	size:8;	signed:0;
	field:unsigned long flags;	offset:40;	size:8;	signed:0;
	field:unsigned long fd;	offset:48;	size:8;	signed:0;
	field:unsigned long off;	offset:56;	size:8;	signed:0;

print fmt: "addr: 0x%08lx, len: 0x%08lx, prot: 0x%08lx, flags: 0x%08lx, fd: 0x%08lx, off: 0x%08lx", ((unsigned long)(REC->addr)), ((unsigned long)(REC->len)), ((unsigned long)(REC->prot)), ((unsigned long)(REC->flags)), ((unsigned long)(REC->fd)), ((unsigned long)(REC->off))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("modify_ldt")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_modify_ldt
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int func;	offset:16;	size:8;	signed:0;
	field:void * ptr;	offset:24;	size:8;	signed:0;
	field:unsigned long bytecount;	offset:32;	size:8;	signed:0;

print fmt: "func: 0x%08lx, ptr: 0x%08lx, bytecount: 0x%08lx", ((unsigned long)(REC->func)), ((unsigned long)(REC->ptr)), ((unsigned long)(REC->bytecount))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("ioperm")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_ioperm
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:unsigned long from;	offset:16;	size:8;	signed:0;
	field:unsigned long num;	offset:24;	size:8;	signed:0;
	field:int turn_on;	offset:32;	size:8;	signed:0;

print fmt: "from: 0x%08lx, num: 0x%08lx, turn_on: 0x%08lx", ((unsigned long)(REC->from)), ((unsigned long)(REC->num)), ((unsigned long)(REC->turn_on))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("iopl")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_iopl
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:unsigned int level;	offset:16;	size:8;	signed:0;

print fmt: "level: 0x%08lx", ((unsigned long)(REC->level))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("rt_sigreturn")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_rt_sigreturn
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;

print fmt: ""
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	name = relateSyscallName("arch_prctl")
	cSyscall, err = parseSyscall(name, string(`name: sys_enter_arch_prctl
format:
	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
	field:int common_pid;	offset:4;	size:4;	signed:1;

	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
	field:int option;	offset:16;	size:8;	signed:0;
	field:unsigned long arg2;	offset:24;	size:8;	signed:0;

print fmt: "option: 0x%08lx, arg2: 0x%08lx", ((unsigned long)(REC->option)), ((unsigned long)(REC->arg2))
`))
	if err != nil {
		return err
	}
	cSyscalls[name] = *cSyscall
	return nil
}
